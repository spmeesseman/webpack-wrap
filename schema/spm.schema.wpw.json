{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://app1.spmeesseman.com/res/app/webpack-wrap/v0.0.1/schema/spm.schema.wpw.json",
    "description": "Webpack-Wrap configuration file schema",
    "title": "WpwSchema",
    "type": "object",
    "additionalProperties": false,
    "required": [
        "builds"
    ],
    "properties": {
        "$schema": {
            "type": "string",
            "pattern": "^(?:file(?:.*?)[/\\\\]|https:\\/\\/app[0-9]\\.spmeesseman\\.com\\/res\\/app\\/webpack-wrap\\/v[0-9]+\\.[0-9]+\\.[0-9]+(?:-(?:-pre|alpha|beta)\\.[0-9]+)?\\/schema)\\/spm\\.schema\\.wpw\\.json$"
        },
        "builds": {
            "$ref": "#/definitions/WpwBuildConfigs"
        },
        "development": {
            "$ref": "#/definitions/WpwBuildBaseConfig"
        },
        "log": {
            "$ref": "#/definitions/WpwLog"
        },
        "options": {
            "$ref": "#/definitions/WpwBuildOptions"
        },
        "overrides": {
            "$ref": "#/definitions/WebpackConfigOverride"
        },
        "paths": {
            "$ref": "#/definitions/WpwRcPaths"
        },
        "pkgJson": {
            "$ref": "#/definitions/WpwPackageJson"
        },
        "production": {
            "$ref": "#/definitions/WpwBuildBaseConfig"
        },
        "schemaVersion": {
            "$ref": "#/definitions/VersionString"
        },
        "source": {
            "$ref": "#/definitions/WpwSourceConfig"
        },
        "test": {
            "$ref": "#/definitions/WpwBuildBaseConfig"
        },
        "version": {
            "$ref": "#/definitions/VersionString"
        },
        "vscode": {
            "$ref": "#/definitions/WpwVsCode"
        },
        "wpwVersion": {
            "$ref": "#/definitions/VersionString"
        }
    },
    "definitions":
    {
        "BooleanDefaultFalse": {
            "$id": "#/WpwBooleanDefaultFalse",
            "type": "boolean",
            "default": false
        },
        "BooleanDefaultTrue": {
            "$id": "#/WpwBooleanDefaultTrue",
            "type": "boolean",
            "default": true
        },
        "BooleanReadOnly": {
            "$id": "#/WpwBooleanReadOnly",
            "type": "boolean",
            "readOnly": true,
            "default": false
        },
        "DirectoryPathRelative": {
            "$id": "#/WpwDirectoryPathRelative",
            "type": "string",
            "maxLength": 100,
            "description": "relative path to a directory",
            "pattern": "^(?:#\\{[\\w_\\-\\.]+?\\}[\\w\\.\\-\\\\/]*?|(?:\\.{1,2}[\\\\/][\\w\\.\\-\\\\/]+|\\.\\.?))$",
            "if": {
                "pattern": "^\\.$"
            },
            "then": {
                "minLength": 1
            },
            "else": {
                "minLength": 3
            }
        },
        "DirectoryPath": {
            "$id": "#/WpwDirectoryPath",
            "type": "string",
            "maxLength": 150,
            "description": "relative or absolute path to a directory",
            "pattern": "^(?:\\.{1,2}|(?:\\.[\\\\/])?[\\w][~@!\\w\\.\\-\\\\/:]+)$",
            "if": {
                "pattern": "^\\.$"
            },
            "then": {
                "minLength": 1
            },
            "else": {
                "minLength": 3
            }
        },
        "DirectoryPathGlob": {
            "$id": "#/definitions/DirectoryPathGlob",
            "type": "string",
            "minLength": 4,
            "descriptiont": "directory type glob path",
            "pattern": "^(?:\\.{1,2}[\\\\/])\\*{0,2}(?:\\.|(?:\\.[\\\\/])?[\\w][~@!\\w\\.\\-\\\\/]+)\\*{0,2}$",
            "if": {
                "pattern": "^\\.{1,2}[\\\\/]"
            },
            "then": {
                "if": {
                    "pattern": "^\\.\\.[\\\\/]\\*{0,2}[\\\\/]"
                },
                "then": {
                    "minLength": 5
                },
                "else": {
                    "minLength": 3
                }
            },
            "else": {
                "minLength": 1
            }
        },
        "FileName": {
            "$id": "#/WpwFileName",
            "type": "string",
            "minLength": 3,
            "maxLength": 150,
            "pattern": "^[\\w\\.\\-]+\\.(?:[cm]?jsx?|tsx?|d\\.ts|[a-z0-9]{2,4})$",
            "descriptiont": "a valid filename, without path, e.g 'main.js', 'app.tsx', etc",
            "examples": [
                "filename.js",
                "filename.ts"
            ]
        },
        "FileOrDirectoryPath": {
            "$id": "#/WpwFileOrDirectoryPath",
            "descriptiont": "relative or absolute path to a file or directory",
            "oneOf": [{
                "$ref": "#/definitions/DirectoryPath"
            },
            {
                "$ref": "#/definitions/FilePath"
            }]
        },
        "FilePath": {
            "$id": "#/WpwFilePath",
            "type": "string",
            "minLength": 5,
            "maxLength": 150,
            "descriptiont": "relative or absolute path to a file",
            "pattern": "^(?:(?:\\.[\\\\/])?[~@!:\\w\\.\\-\\\\/]+)?\\.[a-z0-9\\.]+$",
            "examples": [
                "relative/path/to/filename.js",
                "/home/me/absolute/path/to/filename.jsx",
                "c:\\/users/me/absolute/path/to/filename.ts"
            ]
        },
        "FilePathRelative": {
            "$id": "#/WpwFilePathRelative",
            "type": "string",
            "minLength": 5,
            "maxLength": 150,
            "descriptiont": "relative path to a file",
            "pattern": "^\\.[\\\\/][\\w\\.\\-\\\\/]+\\.([cm]?jsx?|tsx?)$",
            "examples": [
                "relative/path/to/filename.js"
            ]
        },
        "FilePathRelativeLeadingDot": {
            "$id": "#/WpwFilePathRelativeLeadingDot",
            "type": "string",
            "minLength": 6,
            "maxLength": 150,
            "descriptiont": "relative path to a file, with leading ./ or .\\",
            "pattern": "^\\.{1,2}[\\\\/][\\w\\.\\-\\\\/]+?\\.\\w+$",
            "examples": [
                "./relative/path/to/filename.js"
            ]
        },
        "VersionString": {
            "$id": "#/WpwVersionString",
            "type": "string",
            "readOnly": true,
            "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+(?:-(?:pre|alpha|beta)\\.[0-9]+)?$",
            "examples": [
                "1.0.0",
                "2.0.0-beta-1"
            ]
        },
        "WpwBuildConfig": {
            "$id": "#/WpwBuildConfig",
            "type": "object",
            "additionalProperties": false,
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 30
                },
                "auto": {
                    "$ref": "#/definitions/BooleanReadOnly"
                },
                "debug": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "entry": {
                    "$ref": "#/definitions/WpwWebpackEntry"
                },
                "log": {
                    "$ref": "#/definitions/WpwLog"
                },
                "mode": {
                    "$ref": "#/definitions/WpwWebpackMode"
                },
                "options": {
                    "$ref": "#/definitions/WpwBuildOptions"
                },
                "overrides": {
                    "$ref": "#/definitions/WebpackConfigOverride"
                },
                "paths": {
                    "$ref": "#/definitions/WpwRcPaths"
                },
                "source": {
                    "$ref": "#/definitions/WpwSourceConfig"
                },
                "target": {
                    "$ref": "#/definitions/WebpackTarget"
                },
                "type": {
                    "$ref": "#/definitions/WpwBuildType"
                },
                "vscode": {
                    "$ref": "#/definitions/WpwVsCode"
                }
            },
            "examples": [{
                "name": "main",
                "type": "app"
            },
            {
                "name": "types",
                "type": "types",
                "options": {
                    "mode": "tsc",
                    "method": "tsc"
                }
            },
            {
                "name": "docs",
                "type": "jsdoc",
                "options": {
                    "outDir": "dist/docs",
                    "title": "Project Documentation"
                }
            }],
            "dependencies": {
                "debug": {
                    "if": {
                        "properties": {
                            "debug": {
                                "const": true
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                        {
                            "properties": {
                                "type": {
                                    "const": "app"
                                }
                            }
                        },
                        {
                            "properties": {
                                "options": {
                                    "allOf": [{
                                        "properties": {
                                            "devtool": true
                                        }
                                    },
                                    {
                                        "properties": {
                                            "devtool": {
                                                "not": {
                                                    "enabled": {
                                                        "const": false
                                                    }
                                                }
                                            }
                                        }
                                    }]
                                }
                            }
                        }]
                    }
                },
                "target": {
                    "if": {
                        "properties": {
                            "target": { 
                                "enum": [
                                    "web", "webworker"
                                ]
                            }
                        }
                    },
                    "then": { 
                        "properties": {
                            "type": { 
                                "enum": [
                                    "webapp", "app"
                                ]
                            }
                        }
                    }
                },
                "type": {
                    "allOf": [
                    {
                        "if": {
                            "properties": {
                                "type": { 
                                    "const": "webapp"
                                }
                            }
                        },
                        "then": { 
                            "properties": {
                                "target": { 
                                    "enum": [
                                        "web", "webworker"
                                    ]
                                }
                            }
                        }
                    },
                    {
                        "if": {
                            "properties": {
                                "type": { 
                                    "enum": [
                                        "types", "app", "tests"
                                    ]
                                }
                            }
                        },
                        "then": { 
                            "properties": {
                                "target": { 
                                    "const": "node"
                                }
                            }
                        }
                    },
                    {
                        "if": {
                            "properties": {
                                "type": { 
                                    "const": "types"
                                }
                            }
                        },
                        "then": {
                            "properties": {
                                "options": {
                                    "required": [
                                        "types"
                                    ]
                                }
                            }
                        }
                    },
                    {
                        "if": {
                            "properties": {
                                "type": { 
                                    "const": "tests"
                                }
                            }
                        },
                        "then": {
                            "properties": {
                                "options": {
                                    "required": [
                                        "vendormod"
                                    ],
                                    "properties": {
                                        "vendormod": {
                                            "anyOf": [{
                                                "properties": {
                                                    "all": {
                                                        "const": true
                                                    }
                                                }
                                            },
                                            {
                                                "properties": {
                                                    "nyc": {
                                                        "const": true
                                                    }
                                                }
                                            }]
                                        }
                                    }
                                }
                            }
                        }
                    }]
                },
                "options": {
                    "properties": {
                        "options": {
                            "propertyNames": {
                                "enum": [
                                    "analyze", "banner", "cache", "clean", "copy",
                                    "devtool", "entry", "environment", "experiments",
                                    "externals", "html", "ignore", "ignorewarnings",
                                    "istanbul", "jsdoc", "licensefiles", "loghooks",
                                    "minification", "mocha", "optimization", "progress",
                                    "resolve", "rules", "runscripts", "runtimevars",
                                    "scm", "stats", "testsuite", "tscheck", "types",
                                    "upload", "vendormod", "wait"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "WpwBuildConfigs": {
            "$id": "#/WpwBuildConfigs",
            "type": "array",
            "uniqueItems": true,
            "minItems": 0,
            "items": {
                "$ref": "#/definitions/WpwBuildConfig"
            }
        },
        "WpwBuildBaseConfig": {
            "$id": "#/WpwBuildBaseConfig",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "builds": {
                    "$ref": "#/definitions/WpwBuildConfigs"
                },
                "log": {
                    "$ref": "#/definitions/WpwLog"
                },
                "paths": {
                    "$ref": "#/definitions/WpwRcPaths"
                },
                "options": {
                    "$ref": "#/definitions/WpwBuildOptions"
                },
                "overrides": {
                    "$ref": "#/definitions/WebpackConfigOverride"
                },
                "source": {
                    "$ref": "#/definitions/WpwSourceConfig"
                },
                "vscode": {
                    "$ref": "#/definitions/WpwVsCode"
                }
            }
        },
        "WpwBuildOptions": {
            "$id": "#/WpwBuildOptions",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "analyze": {
                    "$ref": "#/definitions/WpwPluginConfigAnalyze"
                },
                "banner": {
                    "$ref": "#/definitions/WpwPluginConfigBanner"
                },
                "cache": {
                    "$ref": "#/definitions/WpwExportConfigCache"
                },
                "clean": {
                    "$ref": "#/definitions/WpwPluginConfigClean"
                },
                "copy": {
                    "$ref": "#/definitions/WpwPluginConfigCopy"
                },
                "devtool": {
                    "$ref": "#/definitions/WpwExportConfigDevTool"
                },
                "entry": {
                    "$ref": "#/definitions/WpwModuleConfigInternal"
                },
                "environment": {
                    "$ref": "#/definitions/WpwModuleConfigInternal"
                },
                "experiments": {
                    "$ref": "#/definitions/WpwModuleConfigInternal"
                },
                "externals": {
                    "$ref": "#/definitions/WpwExportConfigExternals"
                },
                "html": {
                    "$ref": "#/definitions/WpwModuleConfigInternal"
                },
                "ignore": {
                    "$ref": "#/definitions/WpwModuleConfig"
                },
                "ignorewarnings": {
                    "$ref": "#/definitions/WpwModuleConfig"
                },
                "istanbul": {
                    "$ref": "#/definitions/WpwPluginConfigIstanbul"
                },
                "jsdoc": {
                    "$ref": "#/definitions/WpwPluginConfigJsDoc"
                },
                "licensefiles": {
                    "$ref": "#/definitions/WpwModuleConfig"
                },
                "loghooks": {
                    "$ref": "#/definitions/WpwPluginConfigLogHooks"
                },
                "minification": {
                    "$ref": "#/definitions/WpwModuleConfig"
                },
                "mocha": {
                    "$ref": "#/definitions/WpwPluginConfigMocha"
                },
                "optimization": {
                    "$ref": "#/definitions/WpwModuleConfig"
                },
                "output": {
                    "$ref": "#/definitions/WpwExportConfigOutput"
                },
                "plugins": {
                    "$ref": "#/definitions/WpwModuleConfigInternal"
                },
                "progress": {
                    "$ref": "#/definitions/WpwModuleConfig"
                },
                "resolve": {
                    "$ref": "#/definitions/WpwModuleConfigInternal"
                },
                "rules": {
                    "$ref": "#/definitions/WpwModuleConfigInternal"
                },
                "runscripts": {
                    "$ref": "#/definitions/WpwPluginConfigRunScripts"
                },
                "runtimevars": {
                    "$ref": "#/definitions/WpwModuleConfig"
                },
                "scm": {
                    "$ref": "#/definitions/WpwModuleConfig"
                },
                "testsuite": {
                    "$ref": "#/definitions/WpwModuleConfig"
                },
                "tscheck": {
                    "$ref": "#/definitions/WpwModuleConfig"
                },
                "types": {
                    "$ref": "#/definitions/WpwPluginConfigTypes"
                },
                "upload": {
                    "$ref": "#/definitions/WpwPluginConfigUpload"
                },
                "vendormod": {
                    "$ref": "#/definitions/WpwPluginConfigVendorMod"
                },
                "wait": {
                    "$ref": "#/definitions/WpwPluginConfigWait"
                },
                "watch": {
                    "$ref": "#/definitions/WpwModuleConfig"
                },
                "web": {
                    "$ref": "#/definitions/WpwPluginConfigWeb"
                }
            },
            "dependencies": {
                "runtimevars": {
                    "if": {
                        "not": {
                            "properties": {
                                "runtimevars": {
                                    "properties": {
                                        "enabled": {
                                            "const": false
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "then": {
                        "anyOf": [{
                            "properties": {
                                "types": false
                            }
                        },
                        {
                            "properties": {
                                "types": {
                                    "const": false
                                }
                            }
                        }]
                    }
                },
                "types": {
                    "allOf": [{
                        "if": {
                            "not": {
                                "properties": {
                                    "types": {
                                        "properties": {
                                            "enabled": false
                                        }
                                    }
                                }
                            }
                        },
                        "then": {
                            "allOf": [
                            {
                                "anyOf": [{
                                    "properties": {
                                        "analyze": false
                                    }
                                },
                                {
                                    "properties": {
                                        "analyze": {
                                            "properties": {
                                                "enabled": {
                                                    "const": false
                                                }
                                            }
                                        }
                                    }
                                }]
                            },
                            {
                                "anyOf": [{
                                    "properties": {
                                        "runtimevars": false
                                    }
                                },
                                {
                                    "properties": {
                                        "runtimevars": {
                                            "properties": {
                                                "enabled": {
                                                    "const": false
                                                }
                                            }
                                        }
                                    }
                                }]
                            },
                            {
                                "anyOf": [{
                                    "properties": {
                                        "upload": false
                                    }
                                },
                                {
                                    "properties": {
                                        "upload": {
                                            "properties": {
                                                "enabled": {
                                                    "const": false
                                                }
                                            }
                                        }
                                    }
                                }]
                            },
                            {
                                "anyOf": [{
                                    "properties": {
                                        "istanbul": false
                                    }
                                },
                                {
                                    "properties": {
                                        "istanbul": {
                                            "properties": {
                                                "enabled": {
                                                    "const": false
                                                }
                                            }
                                        }
                                    }
                                }]
                            },
                            {
                                "anyOf": [{
                                    "properties": {
                                        "testsuite": false
                                    }
                                },
                                {
                                    "properties": {
                                        "testsuite": {
                                            "properties": {
                                                "enabled": {
                                                    "const": false
                                                }
                                            }
                                        }
                                    }
                                }]
                            },
                            {
                                "anyOf": [{
                                    "properties": {
                                        "jsdoc": false
                                    }
                                },
                                {
                                    "properties": {
                                        "jsdoc": {
                                            "properties": {
                                                "enabled": {
                                                    "const": false
                                                }
                                            }
                                        }
                                    }
                                }]
                            }]
                        }
                    }]
                }
            }
        },
        "WpwBuildType": {
            "$id": "#/WpwBuildType",
            "type": "string",
            "default": "app",
            "enum": [
                "app", "jsdoc", "tests", "types", "webapp"
            ],
            "examples": [{
                "type": "app"
            },
            {
                "type": "types"
            }]
        },
        "WpwExportConfigCache": {
            "$id": "#/WpwExportConfigCache",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "verbose": {
                    "type": "boolean"
                }
            },
            "examples": [{
                "enabled": true,
                "verbose": false
            },
            {
                "verbose": true
            },
            {
                "enabled": false
            }]
        },
        "WpwExportConfigDevTool": {
            "$id": "#/WpwExportConfigDevTool",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "mode": {
                    "$ref": "#/definitions/WpwExportConfigDevToolMode"
                },
                "type": {
                    "$ref": "#/definitions/WpwExportConfigDevToolType"
                },
                "syncHash": {
                    "$ref": "#/definitions/BooleanDefaultTrue",
                    "description": "replaces the actual sourcemap file content hash in the filename with the corresponding module's content hash"
                }
            },
            "examples": [{
                "enabled": true,
                "mode": "plugin",
                "type": "source-map"
            },
            {
                "enabled": true,
                "mode": "devtool",
                "verbose": true
            },
            {
                "enabled": false
            }]
        },
        "WpwExportConfigDevToolMode": {
            "$id": "#/WpwExportConfigDevToolType",
            "default": "plugin",
            "oneOf": [{
                "const": "devtool",
                "description": "use webpack 'devtool' configuration export for sourcemaps"
            },
            {
                "const": "plugin",
                "description": "use webpack 'sourcemaps' plugin for sourcemaps"
            }]
        },
        "WpwExportConfigDevToolType": {
            "$id": "#/WpwExportConfigDevToolMapType",
            "default": "plugin",
            "oneOf": [
            {
                "const": "none"
            },
            {
                "const": "cheap-source-map"
            },
            {
                "const": "cheap-module-source-map"
            },
            {
                "const": "eval",
                "description": "recommended for dev builds w/ max performance"
            },
            {
                "const": "eval-source-map",
                "description": "recommended for dev builds w/ high quality sourcemaps"
            },
            {
                "const": "eval-cheap-module-source-map",
                "description": "tradeoff for dev builds"
            },
            {
                "const": "eval-cheap-source-map",
                "description": "tradeoff for dev builds"
            },
            {
                "const": "inline-source-map",
                "description": "recommended for prod builds w/ max performance"
            },
            {
                "const": "inline-cheap-source-map"
            },
            {
                "const": "inline-cheap-module-source-map"
            },
            {
                "const": "source-map",
                "description": "recommended for prod builds w/ high quality sourcemaps"
            }]
        },
        "WpwExportConfigExternals": {
            "$id": "#/WpwExportConfigExternals",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "all": {
                    "type": "boolean",
                    "description": "applies nodeExternals() plugin"
                },
                "defaults": {
                    "$ref": "#/definitions/BooleanDefaultTrue"
                },
                "modules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WpwModuleName"
                    }
                },
                "presets": {
                    "type": "boolean"
                },
                "raw": {
                    "type": "object",
                    "minProperties": 1,
                    "propertyNames": {
                        "$ref": "#/definitions/WpwModuleName"
                    },
                    "additionalProperties": {
                        "$ref": "#/definitions/WpwModuleNameWithType"
                    }
                },
                "type": {
                    "$ref": "#/definitions/WebpackLibraryType"
                }
            },
            "examples": [{
                "enabled": true,
                "defaults": true
            },
            {
                "enabled": true,
                "defaults": true,
                "modules": [
                    "esbuild", "@spmeesseman/type-utils"
                ]
            },
            {
                "enabled": true,
                "raw": {
                    "esbuild": "esbuild"
                }
            },
            {
                "enabled": true,
                "raw": {
                    "esbuild": "commonjs esbuild"
                }
            },
            {
                "enabled": false
            }],
            "dependencies": {
                "all": {
                    "if": {
                        "properties": {
                            "all": true
                        }
                    },
                    "then": {
                        "properties": {
                            "defaults": false,
                            "modules": false,
                            "raw": false
                        }
                    }
                },
                "enabled": {
                    "if": {
                        "properties": {
                            "enabled": {
                                "const": true
                            }
                        }
                    },
                    "then": {
                        "minProperties": 2
                    }
                }
            }
        },
        "WpwExportConfigOutput": {
            "$id": "#/WpwExportConfigOutput",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "$ref": "#/definitions/BooleanDefaultTrue",
                    "readOnly": true
                },
                "immutable": {
                    "$ref": "#/definitions/BooleanDefaultTrue"
                }
            },
            "if": {
                "properties": {
                    "enabled": {
                        "const": false
                    }
                }
            },
            "then": {
                "properties": {
                    "enabled": {
                        "const": true
                    }
                }
            }
        },
        "WpwLog": {
            "$id": "#/WpwLog",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "color": {
                    "$ref": "#/definitions/WpwLogTrueColor"
                },
                "colors": {
                    "type": "object",
                    "$id": "#/WpwLogColoring",
                    "additionalProperties": false,
                    "properties": {
                        "default": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        },
                        "buildBracket": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        },
                        "buildText": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        },
                        "infoIcon": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        },
                        "valueStar": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        },
                        "valueStarText": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        },
                        "tagBracket": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        },
                        "tagText": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        },
                        "uploadSymbol": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        }
                    }
                },
                "envTag1": {
                    "type": "string",
                    "default": "wpwrap",
                    "minimum": 2,
                    "maxLength": 15
                },
                "envTag2": {
                    "type": "string",
                    "default": "info",
                    "minimum": 2,
                    "maxLength": 15
                },
                "envTagDisable": {
                    "$ref": "#/definitions/BooleanReadOnly"
                },
                "level": {
                    "title": "WpwLoggerLevel",
                    "oneOf": [{
                        "const": 0,
                        "description": "No logging"
                    },
                    {
                        "const": 1,
                        "description": "Logging level 1 - Errors, warnings, and function start/end"
                    },
                    {
                        "const": 2,
                        "description": "Logging level 2 - Level 1 + parameter values"
                    },
                    {
                        "const": 3,
                        "description": "Logging level 3 - Level 2 + non-looping processing detail"
                    },
                    {
                        "const": 4,
                        "description": "Logging level 4 - Level 3 + looping processing detail"
                    },
                    {
                        "const": 5,
                        "description": "Logging level 5 - Verbose"
                    }]
                },
                "pad": {
                    "type": "object",
                    "title": "WpwLogPad",
                    "additionalProperties": false,
                    "properties": {
                        "base": {
                            "type": "number",
                            "default": 0
                        },
                        "envTag": {
                            "type": "number",
                            "readonly": true
                        },
                        "value": {
                            "type": "number",
                            "default": 40
                        }
                    }
                },
                "timestamp": {
                    "$ref": "#/definitions/BooleanDefaultTrue"
                },
                "valueMaxLineLength": {
                    "type": "number",
                    "default": 100,
                    "minValue": 40,
                    "maxValue": 250
                }
            }
        },
        "WpwLogColor": {
            "$id": "#/WpwLogColor",
            "oneOf": [{
                "$ref": "#/definitions/WpwLogTrueColor"
            },
            {
                "const": "bold"
            },
            {
                "const": "inverse"
            },
            {
                "const": "italic"
            },
            {
                "const": "system"
            },
            {
                "const": "underline"
            }]
        },
        "WpwLogTrueColor": {
            "$id": "#/WpwLogTrueColor",
            "oneOf": [{
                "const": "black"
            },
            {
                "const": "blue"
            },
            {
                "const": "cyan"
            },
            {
                "const": "green"
            },
            {
                "const": "grey"
            },
            {
                "const": "magenta"
            },
            {
                "const": "red"
            },
            {
                "const": "white"
            },
            {
                "const": "yellow"
            }]
        },
        "WpwModuleName": {
            "$id": "#/WpwModuleName",
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "pattern": "^(?:@[a-z0-9\\-_]{2,}\\/)?[a-z0-9\\-\\.\\/_]{3,}$",
            "descriptiont": "node module package name (with scope if applicable)",
            "examples": [
                "webpack",
                "@spmeesseman/type-utils"
            ]
        },
        "WpwModuleNameWithType": {
            "$id": "#/WpwModuleNameWithType",
            "type": "string",
            "minLength": 7,
            "maxLength": 70,
            "pattern": "^(?:[a-z\\-]{2,}2? )?(?:@[a-z0-9\\-\\.\\/_]{2,}\\/)?[a-z0-9\\-\\.\\/_]{3,}$",
            "descriptiont": "node module package export type, plus package name (with scope if applicable)",
            "examples": [
                "commonjs webpack",
                "commonjs @spmeesseman/type-utils"
            ]
        },
        "WpwModuleConfig": {
            "$id": "#/WpwModuleConfig",
            "type": "object",
            "required": [ "enabled" ],
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "default": false
                }
            },
            "examples": [{
                "enabled": true
            },
            {
                "enabled": false
            }]
        },
        "WpwModuleConfigInternal": {
            "$id": "#/WpwModuleConfigInternal",
            "type": "object",
            "additionalProperties": false,
            "maxProperties": 0,
            "minProperties": 0,
            "readOnly": true,
            "required": [ "enabled" ],
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "default": false,
                    "readOnly": true
                }
            }
        },
        "WpwPackageJson": {
            "$id": "#/WpwPackageJson",
            "type": "object",
            "readOnly": true,
            "additionalProperties": false,
            "required": [
                "name",
                "version"
            ],
            "properties": {
                "author": {
                    "$ref": "#/definitions/WpwPackageJsonAuthor"
                },
                "description": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 500
                },
                "displayName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 100
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FileOrDirectoryPath"
                    }
                },
                "main": {
                    "$ref": "#/definitions/FilePath"
                },
                "module": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "name": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 60
                },
                "publisher": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 60
                },
                "repository": {
                    "$ref": "#/definitions/WpwPackageJsonRepository"
                },
                "scopedName": {
                    "$ref": "#/definitions/WpwPackageJsonScopedName"
                },
                "scripts": {
                    "$ref": "#/definitions/WpwPackageJsonScripts"
                },
                "types": {
                    "$ref": "#/definitions/FilePath"
                },
                "typescript": {
                    "$ref": "#/definitions/WpwPackageJsonTypescript"
                },
                "version": {
                    "$ref": "#/definitions/VersionString"
                }
            }
        },
        "WpwPackageJsonAuthor": {
            "$id": "#/WpwPackageJsonAuthor",
            "oneOf": [{
                "type": "string",
                "minLength": 3,
                "maxLength": 30,
                "pattern": "^[\\w\\.\\-@ ]+$"
            }, 
            {
                "type": "object",
                "additionalProperties": false,
                "required": [
                    "name"
                ],
                "properties":
                {
                    "name": {
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 30,
                        "pattern": "^[\\w\\.\\-@ ]+$"
                    },
                    "email": {
                        "type": "string",
                        "minLength": 6,
                        "maxLength": 50,
                        "pattern": "^[\\w\\.\\-@]+$"
                    }
                }}
            ]
        },
        "WpwPackageJsonRepository": {
            "$id": "#/WpwPackageJsonRepository",
            "oneOf": [{
                "type": "string",
                "minLength": 8,
                "maxLength": 100,
                "pattern": "^[\\w\\.\\-@/:]+$"
            }, 
            {
                "type": "object",
                "additionalProperties": false,
                "required": [
                    "type", "url"
                ],
                "properties":
                {
                    "type": {
                        "oneOf": [{
                            "const": "cvs"
                        },{
                            "const": "git"
                        },{
                            "const": "svn"
                        }]
                    },
                    "url": {
                        "type": "string",
                        "minLength": 8,
                        "maxLength": 100,
                        "pattern": "^[\\w\\.\\-@/:&]+$"
                    }
                }
            }]
        },
        "WpwPackageJsonScopedName": {
            "$id": "#/WpwPackageJsonScopedName",
            "type": "object",
            "readOnly": true,
            "additionalProperties": false,
            "properties": {
                "name": {
                    "type": "string",
                    "readOnly": true
                },
                "scope": {
                    "type": "string",
                    "pattern": "@[a-z]+",
                    "readOnly": true
                }
            },
            "required": [
                "name"
            ]
        },
        "WpwPackageJsonScripts": {
            "$id": "#/WpwPackageJsonScripts",
            "type": "object",
            "additionalProperties": true,
            "patternProperties": {
                "[\\w_\\-/\\.:|@]+": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 250
                }
            }
        },
        "WpwPackageJsonTypescript": {
            "$id": "#/WpwPackageJsonTypescript",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "definition": {
                    "$ref": "#/definitions/FilePath"
                }
            },
            "required": [
                "definition"
            ]
        },
        "WpwPluginConfigAnalyze": {
            "$id": "#/WpwPluginConfigAnalyze",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "default": {
                "enabled": true,
                "circular": true
            },
            "properties": {
                "enabled": {
                    "$ref": "#/definitions/BooleanDefaultTrue"
                },
                "analyzer": {
                    "oneOf": [{
                        "type": "boolean"
                    },
                    {
                        "$ref": "#/definitions/WpwPluginConfigAnalyzeAnalyzer"
                    }]
                },
                "circular": {
                    "oneOf": [{
                        "type": "boolean"
                    },
                    {
                        "$ref": "#/definitions/WpwPluginConfigAnalyzeCircular"
                    }]
                },
                "visualizer": {
                    "type": "boolean"
                }
            },
            "examples": [{
                "enabled": true,
                "analyzer": true,
                "circular": true,
                "visualizer": false
            },
            {
                "enabled": false
            }],
            "if": {
                "properties": {
                    "enabled": {
                        "const": true
                    }
                }
            },
            "then": {
                "anyOf": [{
                    "required": [
                        "analyzer"
                    ]
                }, {
                    "required": [
                        "circular"
                    ]
                }, {
                    "required": [
                        "visualizer"
                    ]
                }]
            }
        },
        "WpwPluginConfigAnalyzeAnalyzer": {
            "$id": "#/WpwPluginConfigAnalyzeAnalyzer",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "open": {
                    "type": "boolean"
                }
            },
            "examples": [{
                "enabled": true,
                "open": true
            },
            {
                "enabled": false
            }]
        },
        "WpwPluginConfigAnalyzeCircular": {
            "$id": "#/WpwPluginConfigAnalyzeCircular",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "fail": {
                    "type": "boolean"
                }
            },
            "examples": [{
                "enabled": true,
                "fail": false
            },
            {
                "enabled": false
            }]
        },
        "WpwPluginConfigBanner": {
            "$id": "#/WpwPluginConfigBanner",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "text": {
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 500,
                    "pattern": "^[\\w\\-\\.,&%#{} |\\(\\)@\\[\\]\\r\\n]+$"
                }
            },
            "examples": [{
                "enabled": true
            },
            {
                "enabled": true,
                "text": "Copyright #{DATE_STAMP_YEAR} [--My Name or Co.--], All RIghts Reserved"
            },
            {
                "enabled": false
            }]
        },
        "WpwPluginConfigClean": {
            "$id": "#/WpwPluginConfigClean",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "default": {
                "enabled": true,
                "stale": true
            },
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "cache": {
                    "type": "boolean"
                },
                "full": {
                    "type": "boolean"
                },
                "stale": {
                    "$ref": "#/definitions/BooleanDefaultTrue"
                }
            },
            "if": {
                "properties": {
                    "enabled": {
                        "const": true
                    }
                }
            },
            "then": {
                "anyOf": [{
                    "required": [
                        "cache"
                    ]
                },
                {
                    "required": [
                        "full"
                    ]
                },
                {
                    "required": [
                        "stale"
                    ]
                }]
            }
        },
        "WpwPluginConfigCopy": {
            "$id": "#/WpwPluginConfigCopy",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "defaults": {
                    "type": "boolean",
                    "description": "copies resource files in directories named 'res' for webapp type projects; and for private repo projects, copies all resources in a base directory named 'res' to the 'res' directory of a '../*-info' public project, if it exists"
                },
                "entryModuleNoHash": {
                    "type": "boolean",
                    "description": "if entry filenames are hashed, copies the hashed files using a base filename, without the hash.  useful for development debugging / tests"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WpwPluginConfigCopyItem"
                    }
                }
            },
            "examples": [{
                "enabled": true,
                "defaults": true
            },
            {
                "enabled": true,
                "items": [{
                    "to": "relative/or/absolute/path/to",
                    "from": "relative/or/absolute/path/from/or/**/glob/**/env"
                }]
            },
            {
                "enabled": false
            }],
            "if": {
                "properties": {
                    "enabled": {
                        "const": true
                    }
                }
            },
            "then": {
                "anyOf": [{
                    "required": [
                        "items"
                    ],
                    "properties": {
                        "items": {
                            "minItems": 1
                        }
                    }
                },
                {
                    "required": [
                        "defaults"
                    ],
                    "properties": {
                        "defaults": {
                            "const": true
                        }
                    }
                },
                {
                    "required": [
                        "entryModuleNoHash"
                    ],
                    "properties": {
                        "entryModuleNoHash": {
                            "const": true
                        }
                    }
                }]
            }
        },
        "WpwPluginConfigCopyItem": {
            "$id": "#/WpwPluginConfigCopyItem",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "to": {
                    "$ref": "#/definitions/FileOrDirectoryPath"
                },
                "from": {
                    "$ref": "#/definitions/FileOrDirectoryPath"
                },
                "context": {
                    "$ref": "#/definitions/DirectoryPathRelative"
                }
            },
            "required": [
                "to", "from"
            ],
            "if": {
                "properties": {
                    "to": {
                        "$ref": "#/definitions/FilePath"
                    }
                }
            },
            "then": {
                "properties": {
                    "from": {
                        "$ref": "#/definitions/FilePath"
                    }
                }
            }
        },
        "WpwPluginConfigIstanbul": {
            "$id": "#/WpwPluginConfigIstanbul",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "protectRequires": {
                    "$ref": "#/definitions/BooleanDefaultTrue"
                }
            },
            "examples": [
            {
                "enabled": true,
                "protectRequires": true
            },
            {
                "enabled": false
            }]
        },
        "WpwPluginConfigJsDoc": {
            "$id": "#/WpwPluginConfigJsDoc",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "mode": {
                    "default": "plugin",
                    "oneOf": [{
                        "const": "plugin"
                    },
                    {
                        "const": "reserved"
                    }]
                },
                "destination": {
                    "$ref": "#/definitions/DirectoryPath"
                },
                "debug": {
                    "type": "boolean"
                },
                "private": {
                    "type": "boolean"
                },
                "recurse": {
                    "type": "boolean"
                },
                "verbose": {
                    "type": "boolean"
                },
                "configure": {
                    "$ref": "#/definitions/FilePath"
                },
                "package": {
                    "$ref": "#/definitions/FilePath"
                },
                "readme": {
                    "$ref": "#/definitions/FilePath"
                },
                "template": {
                    "$ref": "#/definitions/FilePath"
                },
                "tutorials": {
                    "$ref": "#/definitions/DirectoryPath"
                },
                "encoding": {
                    "default": "utf8",
                    "oneOf": [{
                        "const": "ascii"
                    },
                    {
                        "const": "base64"
                    },
                    {
                        "const": "base64url"
                    },
                    {
                        "const": "binary"
                    },
                    {
                        "const": "hex"
                    },
                    {
                        "const": "latin1"
                    },
                    {
                        "const": "ucs2"
                    },
                    {
                        "const": "utf8"
                    },
                    {
                        "const": "utf16le"
                    }]
                }
            },
            "if": {
                "properties": {
                    "enabled": {
                        "const": true
                    }
                }
            },
            "then": {
                "required": [
                    "mode"
                ]
            },
            "examples": [{
                "mode": "plugin",
                "title": "API DOcumentation",
                "configure": ".jsdoc.json",
                "destination": "dist/docs/api",
                "readme": "README.md",
                "debug": false,
                "verbose": false,
                "private": false,
                "recurse": true,
                "encosing": "utf8",
                "tutorials": "doc/tutorials"
            }]
        },
        "WpwPluginConfigLogHooks": {
            "$id": "#/WpwPluginConfigLogHooks",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "description": "hook event logging for increased overview of how webpack stages are executed. enabled by default",
            "default": {
                "enabled": true,
                "compiler": true,
                "compilation": {
                    "processAssets": true
                }
            },
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "compiler": {
                    "type": "boolean"
                },
                "compilation": {
                    "$ref": "#/definitions/WpwPluginConfigLogHooksCompilation"
                }
            },
            "examples": [{
                "enabled": true,
                "compiler": true,
                "compilation": {
                    "all": true
                }
            },
            {
                "enabled": true,
                "compiler": true,
                "compilation": {
                    "deprecated": false,
                    "hashing": false,
                    "optimization": false,
                    "processAssets": true
                }
            },
            {
                "enabled": false
            }],
            "if": {
                "properties": {
                    "enabled": {
                        "const": true
                    }
                }
            },
            "then": {
                "required": [
                    "compiler"
                ]
            }
        },
        "WpwPluginConfigLogHooksCompilation": {
            "$id": "#/WpwPluginConfigLogHooksCompilation",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "all": {
                    "type": "boolean"
                },
                "deprecated": {
                    "type": "boolean"
                },
                "hashing": {
                    "type": "boolean"
                },
                "optimization": {
                    "type": "boolean"
                },
                "processAssets": {
                    "type": "boolean"
                }
            },
            "dependencies": {
                "hashing": {
                    "if": {
                        "properties": {
                            "hashing": {
                                "const": true
                            }
                        }
                    },
                    "then": {
                        "anyOf": [{
                            "properties": {
                                "all": false
                            }
                        },
                        {
                            "properties": {
                                "all": {
                                    "const": false
                                }
                            }
                        }]
                    }
                },
                "optimization": {
                    "if": {
                        "properties": {
                            "optimization": {
                                "const": true
                            }
                        }
                    },
                    "then": {
                        "anyOf": [{
                            "properties": {
                                "all": false
                            }
                        },
                        {
                            "properties": {
                                "all": {
                                    "const": false
                                }
                            }
                        }]
                    }
                },
                "processAssets": {
                    "if": {
                        "properties": {
                            "processAssets": {
                                "const": true
                            }
                        }
                    },
                    "then": {
                        "anyOf": [{
                            "properties": {
                                "all": false
                            }
                        },
                        {
                            "properties": {
                                "all": {
                                    "const": false
                                }
                            }
                        }]
                    }
                }
            }
        },
        "WpwPluginConfigMocha": {
            "$id": "#/WpwPluginConfigMocha",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "slow": {
                    "type": "number",
                    "minimum": 1000
                },
                "colors": {
                    "$ref": "#/definitions/BooleanDefaultTrue"
                },
                "baseDir": {
                    "$ref": "#/definitions/DirectoryPath"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilePath"
                    }
                }
            },
            "dependencies": {
                "baseDir": {
                    "if": {
                        "properties": {
                            "baseDir": true
                        }
                    },
                    "then": {
                        "properties": {
                            "files": false
                        }
                    }
                },
                "files": {
                    "if": {
                        "properties": {
                            "files": true
                        }
                    },
                    "then": {
                        "properties": {
                            "baseDir": false
                        }
                    }
                }
            },
            "examples": [
            {
                "enabled": true,
                "slow": 2500,
                "colors": true
            },
            {
                "enabled": false
            }]
        },
        "WpwPluginConfigRunScripts": {
            "$id": "#/WpwPluginConfigRunScripts",
            "type": "object",
            "minProperties": 1,
            "additionalItems": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "start": {
                    "$ref": "#/definitions/WpwPluginConfigRunScriptsItem"
                },
                "beforeCompile": {
                    "$ref": "#/definitions/WpwPluginConfigRunScriptsItem"
                },
                "afterCompile": {
                    "$ref": "#/definitions/WpwPluginConfigRunScriptsItem"
                },
                "compilation": {
                    "$ref": "#/definitions/WpwPluginConfigRunScriptsItem"
                },
                "done": {
                    "$ref": "#/definitions/WpwPluginConfigRunScriptsItem"
                }
            },
            "examples": [
            {
                "enabled": true,
                "done": {
                    "mode": "synchronous",
                    "scripts": [
                        "bin/done/path/to/script.js",
                        "script/done/path/to/script.sh",
                        "script/done/path/to/script.ps1"
                    ]
                },
                "start": {
                    "mode": "parallel",
                    "scripts": [
                        "bin/start/path/to/script.js",
                        "script/done/path/to/script.sh",
                        "script/start/path/to/script.ps1"
                    ]
                }
            },
            {
                "enabled": false
            }],
            "dependencies": {
                "comilation": {
                    "if": {
                        "properties": {
                            "compilation": true
                        }
                    },
                    "then": {
                        "properties": {
                            "compilation": {
                                "stage": true
                            }
                        }
                    }
                }
            },
            "if": {
                "properties": {
                    "enabled": {
                        "const": true
                    }
                }
            },
            "then": {
                "anyOf": [{
                    "required": [ "start" ]
                },
                {
                    "required": [ "beforeCompile" ]
                },
                {
                    "required": [ "afterCompile" ]
                },
                {
                    "required": [ "done" ]
                },
                {
                    "minProperties": 2
                }]
            }
        },
        "WpwPluginConfigRunScriptsItem": {
            "$id": "#/WpwPluginConfigRunScriptsItem",
            "type": "object",
            "additionalProperties": false,
            "required": [
                "scripts"
            ],
            "properties": {
                "async": {
                    "type": "boolean"
                },
                "stage": {
                    "$ref": "#/definitions/WpwWebhookCompilationHookStage"
                },
                "mode": {
                    "default": "synchronous",
                    "oneOf": [{
                        "const": "parallel"
                    },
                    {
                        "const": "synchronous"
                    }]
                },
                "scripts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WpwPluginConfigRunScriptsItemDef"
                    }
                }
            },
            "dependencies": {
                "mode": {
                    "if": {
                        "properties": {
                            "mode": {
                                "const": "parallel"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "async": {
                                "const": true
                            }
                        }
                    }
                }
            }
        },
        "WpwPluginConfigRunScriptsItemDef": {
            "$id": "#/WpwPluginConfigRunScriptsItemDef",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "required": [
                "path"
            ],
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "default": "node",
                    "oneOf": [{
                        "const": "bash"
                    },
                    {
                        "const": "batch"
                    },
                    {
                        "const": "cmd"
                    },
                    {
                        "const": "node"
                    },
                    {
                        "const": "node_module"
                    },
                    {
                        "const": "sh"
                    },
                    {
                        "const": "powershell"
                    }]
                },
                "path": {
                    "$ref": "#/definitions/FilePath"
                }
            }
        },
        "WpwPluginConfigTypes": {
            "$id": "#/WpwPluginConfigTypes",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "bundle": {
                    "default": false,
                    "oneOf": [{
                        "type": "boolean"
                    },
                    {
                        "$ref": "#/definitions/WpwPluginConfigTypesBundle"
                    }]
                },
                "method": {
                    "$ref": "#/definitions/WpwPluginConfigTypesMethod"
                },
                "mode": {
                    "$ref": "#/definitions/WpwPluginConfigTypesMode"
                },
                "entry": {
                    "$ref": "#/definitions/FilePathRelativeLeadingDot",
                    "description": "use a virtual file as the entry point, perform build using the types build 'src' path"
                }
            },
            "examples": [{
                "method": "program",
                "mode": "plugin"
            },
            {
                "enabled": false
            }]
        },
        "WpwPluginConfigTypesBundle": {
            "$id": "#/WpwPluginConfigTypesBundle",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "baseDir": {
                    "$ref": "#/definitions/DirectoryPath"
                },
                "bundler": {
                    "$ref": "#/definitions/WpwPluginConfigTypesBundler"
                },
                "headerPath": {
                    "$ref": "#/definitions/FilePath"
                },
                "headerText": {
                    "type": "string",
                    "maxLength": 256
                },
                "main": {
                    "$ref": "#/definitions/FileOrDirectoryPath",
                    "description": "relative path to the mina file, or directory - if a directory is specified, all dts files will be included, i.e. **/*.d.ts"
                },
                "name": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 50
                },
                "out": {
                    "$ref": "#/definitions/FileName",
                    "description": "output file name (ending in .d.ts)"
                },
                "outputAsModuleFolder": {
                    "$ref": "#/definitions/BooleanDefaultTrue",
                    "description": "output with module folder structure as opposed to module namespaces"
                },
                "removeSource": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "verbose": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                }
            },
            "examples": [{
                "enabled": true,
                "removeSource": false,
                "bundler": "dts-bundle",
                "outputFile": "types.d.ts"
            }]
        },
        "WpwPluginConfigTypesBundler": {
            "$id": "#/WpwPluginConfigTypesBundler",
            "default": "dts-bundle",
            "description": "the library / program / package to use for bundling",
            "oneOf": [{
                "const": "dts-bundle"
            },
            {
                "const": "tsc"
            }]
        },
        "WpwPluginConfigTypesMethod": {
            "$id": "#/WpwPluginConfigTypesMethod",
            "default": "program",
            "oneOf": [{
                "const": "program"
            },
            {
                "const": "tsc"
            }]
        },
        "WpwPluginConfigTypesMode": {
            "$id": "#/WpwPluginConfigTypesBuildMode",
            "default": "plugin",
            "oneOf": [{
                "const": "plugin",
                "description": "perform 'types' build as s standard module build and a virtual entry point using internal plugin"
            },
            {
                "const": "loader",
                "description": "perform 'types' build as s standard module build and a virtual entry point using internal loader"
            },
            {
                "const": "tscheck",
                "description": "perform 'types' build using fork-ts-checker-plugin and ts/jsonconfig.json"
            }]
        },
        "WpwPluginConfigUpload": {
            "$id": "#/WpwPluginConfigUpload",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "url": {
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^https?:\\/\\/[${}\\w\\.\\-]+[\\\\/?][${}\\w\\W\\.\\-\\\\/&]+"
                },
                "plink": {
                    "type": "object",
                    "properties": {
                        "user": {
                            "type": "string",
                            "minLength": 4,
                            "maxLength": 100
                        },
                        "key": {
                            "type": "string",
                            "minLength": 4,
                            "maxLength": 100
                        }
                    },
                    "required": [
                        "user", "key"
                    ],
                    "examples": [{
                        "plink": {
                            "key": "${REPLACED_ENVVAR_PLINK_KEY}",
                            "user": "${REPLACED_ENVVAR_PLINK_USER}"
                        }
                    }]
                },
                "scp": {
                    "type": "object",
                    "properties": {
                        "user": {
                            "type": "string",
                            "minLength": 4,
                            "maxLength": 100
                        },
                        "key": {
                            "type": "string",
                            "minLength": 4,
                            "maxLength": 100
                        }
                    },
                    "required": [
                        "user", "key"
                    ],
                    "examples": [{
                        "scp": {
                            "key": "${REPLACED_ENVVAR_SCP_KEY}",
                            "user": "${REPLACED_ENVVAR_SCP_USER}"
                        }
                    }]
                }
            },
            "examples": [{
                "enabled": true,
                "url": "https://api.mydomain.com/api/v1",
                "plink": {
                    "key": "${REPLACED_ENVVAR_PLINK_KEY}",
                    "user": "${REPLACED_ENVVAR_PLINK_USER}"
                },
                "scp": {
                    "key": "${REPLACED_ENVVAR_SCP_KEY}",
                    "user": "${REPLACED_ENVVAR_SCP_USER}"
                }
            },
            {
                "enabled": false
            }],
            "if": {
                "properties": {
                    "enabled": {
                        "const": true
                    }
                }
            },
            "then": {
                "required": [
                    "url", "plink", "scp"
                ]
            }
        },
        "WpwPluginConfigVendorMod": {
            "$id": "#/WpwPluginConfigVendorMod",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "all": {
                    "type": "boolean"
                },
                "clean_plugin": {
                    "type": "boolean",
                    "description": "modification to initialize the existing 'stale' assets at runtime, before first build"
                },
                "dts_bundle": {
                    "type": "boolean",
                    "description": "modification to fix bug when using **/*.d.ts in dts-bundle's config.main"
                },
                "nyc": {
                    "type": "boolean",
                    "description": "modification to remove un-resolvable testing function "
                },
                "source_map_plugin": {
                    "type": "boolean",
                    "description": "modification that disables ... TODO"
                },
                "ts_loader": {
                    "type": "boolean",
                    "description": "modification that allows use of the 'emitDeclarationsOnly' flag to enable types compilation only, without ts-checker"
                }
            },
            "examples": [{
                "enabled": true,
                "all": true
            },
            {
                "enabled": true,
                "all": false,
                "clean_plugin": true,
                "dts_bundle": true,
                "source_map_plugin": false,
                "ts_loader": false
            },
            {
                "enabled": false
            }],
            "if": {
                "properties": {
                    "enabled": {
                        "const": true
                    }
                }
            },
            "then": {
                "anyOf": [{
                    "required": [
                        "all"
                    ]
                },{
                    "required": [
                        "clean_plugin"
                    ]
                }, {
                    "required": [
                        "dts_bundle"
                    ]
                },{
                    "required": [
                        "nyc"
                    ]
                }, {
                    "required": [
                        "source_map_plugin"
                    ]
                }, {
                    "required": [
                        "ts_loader"
                    ]
                }]
            }
        },
        "WpwPluginConfigWait": {
            "$id": "#/WpwPluginConfigWait",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "items": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/WpwPluginConfigWaitItem"
                    }
                }
            },
            "examples": [{
                "enabled": true,
                "items": [{
                    "type": "event",
                    "name": "build.name_to_wait_for"
                }]
            },
            {
                "enabled": true,
                "items": [{
                    "type": "file",
                    "name": "dist/somefilename.js"
                }]
            },
            {
                "enabled": true,
                "items": [{
                    "type": "file",
                    "name": "dist/somefilename.js"
                },
                {
                    "type": "event",
                    "name": "build.name_to_wait_for"
                }]
            },
            {
                "enabled": false
            }],
            "if": {
                "properties": {
                    "enabled": {
                        "const": true
                    }
                }
            },
            "then": {
                "required": [
                    "items"
                ]
            }
        },
        "WpwPluginConfigWaitItem": {
            "$id": "#/WpwPluginConfigWaitItem",
            "type": "object",
            "additionalProperties": false,
            "required": [
                "mode", "name"
            ],
            "properties": {
                "mode": {
                    "oneOf": [{
                        "const": "file"
                    },
                    {
                        "const": "event"
                    }]
                },
                "source": {
                    "type": "string",
                    "maxLength": 0,
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "description": "for `file` mode, an absolute or relative path to a file, for `event mode`, a build name"
                },
                "interval": {
                    "type": "number",
                    "description": "for `file` mode, # of milliseconds between each check (ignored in `event` mode)"
                },
                "timeout": {
                    "type": "number",
                    "description": "for `file` mode, # of max seconds to wait before failing (ignored in `event` mode)"
                }
            },
            "examples": [{
                "type": "event",
                "name": "build.name_to_wait_for"
            },
            {
                "type": "file",
                "name": "dist/somefilename.js"
            }]
        },
        "WpwPluginConfigWeb": {
            "$id": "#/WpwPluginConfigWeb",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "publicPath": {
                    "$ref": "#/definitions/DirectoryPathRelative"
                },
                "filename": {
                    "$ref": "#/definitions/WpwPluginConfigWebFilename"
                }
            },
            "examples": [
            {
                "enabled": true,
                "filename": "./${WEB_FILENAME_VAR}",
                "publicPath": "./${WEB_PUBLIC_PATH_VAR}"
            },
            {
                "enabled": false
            }],
            "if": {
                "properties": {
                    "enabled": {
                        "const": true
                    }
                }
            },
            "then": {
                "anyOf": [{
                    "required": [
                        "items"
                    ]
                },
                {
                    "required": [
                        "publicPath"
                    ]
                }]
            }
        },
        "WpwPluginConfigWebFilename": {
            "$id": "#/WpwPluginConfigWebFilename",
            "$comment": "Filename transforms",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "camelToDash": {
                    "type": "boolean",
                    "default": false,
                    "$comment": "Convert camel case filename to lowercase and inject a dash '-' character preceding each character converted"
                },
                "jsDirectory": {
                    "type": "boolean",
                    "default": false,
                    "$comment": "Output all root directory javascript files into a 'js' subdirectory"
                }
            }
        },
        "WpwRcPaths": {
            "$id": "#/WpwRcPaths",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "base": {
                    "$ref": "#/definitions/DirectoryPath",
                    "default": ".",
                    "description": "path to the base project directory, a full path containing project's package.json"
                },
                "ctx": {
                    "$ref": "#/definitions/DirectoryPath",
                    "description": "path to the base context directory as defined by Webpack, full path or relative to the project directory containing package.json"
                },
                "dist": {
                    "$ref": "#/definitions/DirectoryPath",
                    "description": "path to the distribution / output directory, full path or relative to the project directory containing package.json"
                },
                "src": {
                    "$ref": "#/definitions/DirectoryPath",
                    "description": "path to the base source directory, full path or relative to the project directory containing package.json"
                },
                "temp": {
                    "$ref": "#/definitions/DirectoryPath",
                    "default": "node_modules/.cache/wpwrap/temp",
                    "description": "path to a temporary directory, full path or relative to the project directory containing package.json"
                }
            }
        },
        "WpwSourceConfig": {
            "$id": "#/WpwSourceConfig",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "required": [
                "type"
            ],
            "properties": {
                "config": {
                    "$ref": "#/definitions/WpwSourceTsConfig"
                },
                "configFile": {
                    "$ref": "#/definitions/WpwSourceTsConfigFile"
                },
                "ext": {
                    "$ref": "#/definitions/WpwSourceExtension"
                },
                "options": {
                    "$ref": "#/definitions/WpwSourceOptions"
                },
                "type": {      
                    "$ref": "#/definitions/WpwSourceType"
                }
            },
            "dependencies": {
                "type": {
                    "allOf": [{
                        "if": {
                            "properties": {
                                "type": {
                                    "const": "javascript"
                                }
                            }
                        },
                        "then": {
                            "properties": {
                                "options": {
                                    "properties": {
                                        "ts": false
                                    }
                                }
                            }
                        }
                    },
                    {
                        "if": {
                            "properties": {
                                "type": {
                                    "const": "typescript"
                                }
                            }
                        },
                        "then": {
                            "properties": {
                                "options": {
                                    "properties": {
                                        "js": false
                                    }
                                }
                            }
                        }
                    }]
                }
            }
        },
        "WpwSourceJavascriptOptions": {
            "$id": "#/WpwSourceJavascriptOptions",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "loader": {
                    "$ref": "#/definitions/WpwSourceJavascriptLoader"
                }
            }
        },
        "WpwSourceJavascriptLoader": {
            "$id": "#/WpwSourceJavascriptLoader",
            "default": "ts-loader",
            "description": "preferred loader for typescript files, defaults to `babel`",
            "oneOf": [{
                "const": "babel"
            },
            {
                "const": "esbuild"
            }]
        },
        "WpwSourceOptions": {
            "$id": "#/WpwSourceOptions",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "js": {
                    "$ref": "#/definitions/WpwSourceJavascriptOptions"
                },
                "ts": {
                    "$ref": "#/definitions/WpwSourceTypescriptOptions"
                }
            }
        },
        "WpwSourceTsConfig": {
            "$id": "#/WpwSourceTsConfig",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "compilerOptions": {
                    "$ref": "#/definitions/WpwSourceConfigCompilerOptions"
                },
                "exclude": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "include": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extends": {
                    "oneOf": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }]
                }
            }
        },
        "WpwSourceTsConfigFile": {
            "$id": "#/WpwSourceTsConfigFile",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "dir": {
                    "type": "string",
                    "readOnly": true
                },
                "file": {
                    "type": "string",
                    "readOnly": true
                },
                "files": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/FilePath"
                    }
                },
                "path": {
                    "$ref": "#/definitions/FilePath",
                    "description": "Path to a [t|s]]sconfig[.*].json file, filename inclusive, absolute or relative to the project base directory"
                },
                "raw": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "WpwSourceConfigCompilerOptions": {
            "$id": "#/WpwSourceConfigCompilerOptions",
            "type": "object",
            "additionalProperties": true,
            "properties": {                      
                "allowJs": {
                    "type": "boolean"
                },
                "alwaysStrict": {
                    "type": "boolean"
                },
                "allowSyntheticDefaultImports": {
                    "type": "boolean"
                },
                "allowUnreachableCode": {
                    "type": "boolean"
                },
                "allowUnusedLabels": {
                    "type": "boolean"
                },
                "baseUrl":{
                    "type": "string"
                },
                "checkJs": {
                    "type": "boolean"
                },
                "composite": {
                    "type": "boolean"
                },
                "declaration": {
                    "type": "boolean"
                },
                "declarationDir": {
                    "type": "string"
                },
                "declarationMap": {
                    "type": "boolean"
                },
                "declarationsOnly": {
                    "type": "boolean"
                },
                "downlevelIteration": {
                    "type": "boolean"
                },
                "emitDeclarationOnly": {
                    "type": "boolean"
                },
                "emitDecoratorMetadata":  {
                    "type": "boolean"
                },
                "experimentalDecorators": {
                    "type": "boolean"
                },
                "incremental": {
                    "type": "boolean"
                },  
                "importHelpers": {
                    "type": "boolean"
                },
                "inlineSources": {
                    "type": "boolean"
                },
                "inlineSourceMap": {
                    "type": "boolean"
                },
                "isolatedModules": {
                    "type": "boolean"
                },         
                "jsx": {
                    "type": "string"
                },
                "lib": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WpwSourceNodeJsTarget"
                    }
                },  
                "mapRoot": {
                    "type": "string"
                },
                "module": {
                    "$ref": "#/definitions/WpwSourceNodeJsModule"
                },
                "moduleResolution": {
                    "$ref": "#/definitions/WpwSourceNodeJsModuleResolution"
                },
                "noEmit": {
                    "type": "boolean"
                },
                "noFallthroughCasesInSwitch": {
                    "type": "boolean"
                },
                "noImplicitAny": {
                    "type": "boolean"
                },
                "noImplicitOverride": {
                    "type": "boolean"
                },
                "noImplicitReturns": {
                    "type": "boolean"
                },
                "noImplicitThis": {
                    "type": "boolean"
                },
                "noImplicitUseStrict": {
                    "type": "boolean"
                },
                "noUncheckedIndexedAccess": {
                    "type": "boolean"
                },
                "noUnusedLocals": {
                    "type": "boolean"
                },
                "noUnusedParameters": {
                    "type": "boolean"
                },
                "outFile": {
                    "type": "string"
                }, 
                "outDir": {
                    "type": "string"
                }, 
                "paths": {
                    "$ref": "#/definitions/WpwSourceConfigCompilerOptionsPaths"
                }, 
                "removeComments": {
                    "type": "boolean"
                },
                "resolveJsonModule": {
                    "type": "boolean"
                },
                "rootDir": {
                    "type": "string"
                },
                "rootDirs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "skipLibCheck": {
                    "type": "boolean"
                },
                "sourceMap": {
                    "type": "boolean"
                },
                "sourceRoot": {
                    "type": "string"
                },
                "strict": {
                    "type": "boolean"
                },
                "strictPropertyInitialization": {
                    "type": "boolean"
                },
                "strictFunctionTypes": {
                    "type": "boolean"
                },
                "strictBindCallApply": {
                    "type": "boolean"
                }, 
                "strictNullChecks": {
                    "type": "boolean"
                }, 
                "suppressImplicitAnyIndexErrors": {
                    "type": "boolean"
                },
                "suppressExcessPropertyErrors": {
                    "type": "boolean"
                },
                "target": {
                    "$ref": "#/definitions/WpwSourceNodeJsTarget"
                },
                "tsBuildInfoFile": {
                    "type": "string"
                },                 
                "typeRoots": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },                 
                "types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "WpwSourceConfigCompilerOptionsPaths": {
            "$id": "#/WpwSourceConfigCompilerOptionsPaths",
            "type": "object",
            "patternProperties": {
                "^[a-zA-Z:@][\\w:@]+$": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DirectoryPathGlob"
                    }
                }
            },
            "propertyNames": {
                "maxLength": 50
            }
        },
        "WpwSourceTypescriptOptions": {
            "$id": "#/WpwSourceTypescriptOptions",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": false,
            "properties": {
                "loader": {
                    "$ref": "#/definitions/WpwSourceTypescriptLoader"
                }
            }
        },
        "WpwSourceTypescriptLoader": {
            "$id": "#/WpwSourceTypescriptLoader",
            "default": "ts-loader",
            "description": "preferred loader for typescript files, defaults to `babel`",
            "oneOf": [{
                "const": "babel"
            },
            {
                "const": "esbuild"
            },
            {
                "const": "ts-loader"
            }]
        },
        "WpwSourceNodeJsModule": {
            "$id": "#/WpwSourceNodeJsModule",
            "default": "commonjs",
            "enum": [
                "amd", "commonjs", "commonJS", "es2015", "ES2015", "es6", "ES6", "esnext", "ESNEXT", "system", "umd"
            ]
        },
        "WpwSourceNodeJsModuleResolution": {
            "$id": "#/WpwSourceNodeJsModuleResolution",
            "type": "string",
            "default": "node",
            "enum": [
                "node", "node10", "node16", "nodenext", "bundler"
            ]
        },
        "WpwSourceNodeJsTarget": {
            "$id": "#/WpwSourceNodeJsTarget",
            "type": "string",
            "default": "es2020",
            "enum": [
                "es5", "es6", "es2015", "es2016", "es2017", "es2018", "es2019", "es2020", "esnext",
                "ES5", "ES6", "ES2015", "ES2016", "ES2017", "ES2018", "ES2019", "ES2020", "ESNEXT"
            ]
        },
        "WpwSourceExtension": {
            "$id": "#/WpwSourceExtension",
            "default": "js",
            "readOnly": true,
            "maxLength": 0,
            "oneOf": [{
                "const": "js"
            },{
                "const": "ts"
            }]
        },
        "WpwSourceType": {
            "$id": "#/WpwSourceType",
            "default": "javascript",
            "oneOf": [{
                "const": "javascript"
            },{
                "const": "typescript"
            }]
        },
        "WpwVsCode": {
            "$id": "#/WpwVsCode",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "type": {
                    "default": "extension",
                    "oneOf": [{
                        "const": "extension"
                    },
                    {
                        "const": "languageclient"
                    },
                    {
                        "const": "languageserver"
                    },
                    {
                        "const": "tests"
                    },
                    {
                        "const": "webview"
                    }]
                }
            },
            "required": [
                "type"
            ],
            "examples": [{
                "vscode": {
                    "type": "extension"
                }
            }]
        },
        "WpwWebpackEntry": {
            "$id": "#/WpwWebpackEntry",
            "oneOf": [{
                "$ref": "#/definitions/FilePathRelativeLeadingDot"
            },
            {
                "$ref": "#/definitions/WpwWebpackEntryImport"
            }]
        },
        "WpwWebpackEntryImport": {
            "$id": "#/WpwWebpackEntryImport",
            "type": "object",
            "description": "mapping of module names to respective entry point file, relative to context directory",
            "minProperties": 1,
            "additionalProperties": false,
            "patternProperties": {
                "^[a-z][\\w\\-\\.]+$": {
                    "$ref": "#/definitions/WpwWebpackEntryValue"
                }
            },
            "propertyNames": {
                "maxLength": 30
            },
            "examples": [{
                "entry": {
                    "modulename": "./path/to/entry.ts"
                }
            },
            {
                "entry": {
                    "modulename1": "./path/to/entry1.ts",
                    "modulename2": "./path/to/entry2.ts",
                    "modulename3": "./path/to/entry3.ts"
                }
            },
            {
                "entry": {
                    "modulename": {
                        "import": "./path/to/entrymodule.ts"
                    },
                    "modulename2": "./path/to/entry2.ts"
                }
            },
            {
                "entry": {
                    "modulename1": {
                        "import": "./path/to/entrymodule1.ts"
                    },
                    "modulename2": {
                        "import": "./path/to/entrymodule1.ts",
                        "dependOn": "modulename1"
                    },
                    "modulename3": {
                        "import": "./path/to/entrymodule2.ts",
                        "dependOn": "modulename2"
                    }
                }
            }]
        },
        "WpwWebpackEntryObject": {
            "$id": "#/WpwWebpackEntryObject",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "asyncChunks": {
                    "type": "boolean"
                },
                "baseUri": {
                    "type": "string",
                    "minLength": 1
                },
                "chunkLoading": {
                    "oneOf": [{
                        "type": "boolean"
                    },
                    {
                        "const": "jsonp"
                    },
                    {
                        "const": "import"
                    },
                    {
                        "const": "importScripts"
                    },
                    {
                        "const": "require"
                    },
                    {
                        "const": "async-node"
                    }]
                },
                "dependOn": {
                    "oneOf": [{
                        "type": "string",
                        "pattern": "^[a-zA-Z][\\w]+$"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "pattern": "^[a-zA-Z][\\w]+$"
                        }
                    }]
                },
                "filename": {
                    "$ref": "#/definitions/FileName"
                },
                "import": {
                    "$ref": "#/definitions/FilePathRelativeLeadingDot"
                },
                "layer": {
                    "oneOf": [{
                        "const": "debug"
                    },
                    {
                        "const": "release"
                    }]
                },
                "publicPath": {
                    "$ref": "#/definitions/DirectoryPathRelative"
                }
            },
            "propertyNames": {
                "minLength": 3,
                "maxLength": 20,
                "pattern": "^[a-z][\\w]+$"
            },
            "required": [
                "import"
            ]
        },
        "WpwWebpackEntryValue": {
            "$id": "#/WpwWebpackEntryValue",
            "anyOf": [
            {
                "$ref": "#/definitions/FilePathRelativeLeadingDot"
            },
            {
                "$ref": "#/definitions/WpwWebpackEntryObject"
            }]
        },
        "WpwWebpackMode":  {
            "$id": "#/WpwWebpackMode",
            "type": "string",
            "default": "production",
            "enum": [
                "development",
                "production",
                "none",
                "test"
            ]
        },
        "WpwWebpackCompilationHook": {
            "$id": "#/WpwWebpackCompilationHook",
            "oneOf": [{
                "const": "buildModule"
            },
            {
                "const": "rebuildModule"
            },
            {
                "const": "seal"
            },
            {
                "const": "unseal"
            },
            {
                "const": "afterSeal"
            },
            {
                "const": "processAssets"
            },
            {
                "const": "afterProcessAssets"
            },
            {
                "const": "beforeHash"
            },
            {
                "const": "afterHash"
            },
            {
                "const": "contentHash"
            },
            {
                "const": "finishModules"
            }]
        },
        "WpwWebhookCompilationHookStage": {
            "$id": "#/WpwWebhookCompilationHookStage",
            "oneOf": [{
                "const": "additional"
            },
            {
                "const": "pre_process"
            },
            {
                "const": "derived"
            },
            {
                "const": "additions"
            },
            {
                "const": "optimize"
            },
            {
                "const": "optimize_count"
            },
            {
                "const": "optimize_compatibility"
            },
            {
                "const": "optimize_size"
            },
            {
                "const": "dev_tooling"
            },
            {
                "const": "optimize_inline"
            },
            {
                "const": "summarize"
            },
            {
                "const": "optimize_hash"
            },
            {
                "const": "optimize_transfer"
            },
            {
                "const": "analyse"
            },
            {
                "const": "report"
            }]
        },
        "WpwWebpackCompilerHook": {
            "$id": "#/WpwWebpackCompilerHook",
            "oneOf": [{
                "const": "initialize"
            },
            {
                "const": "environment"
            },
            {
                "const": "afterEnvironment"
            },
            {
                "const": "run"
            },
            {
                "const": "make"
            },
            {
                "const": "afterPlugins"
            },
            {
                "const": "beforeCompile"
            },
            {
                "const": "compile"
            },
            {
                "const": "afterCompile"
            },
            {
                "const": "thisCompilation"
            },
            {
                "const": "compilation"
            },
            {
                "const": "emit"
            },
            {
                "const": "done"
            }]
        },
        "WebpackConfigOverride": {
            "$id": "#/WebpackConfigOverride",
            "type": "object",
            "additionalProperties": true,
            "patternProperties": {
                "^[a-z][\\w]+$": true
            },
            "propertyNames": {
                "maxLength": 20
            },
            "description": "An object that is directly applied to the webpack configurqtion before it is returned to the wp engine",
            "examples": [
            {
                "externals": [{
                    "webpack": "commonjs webpack"
                }]
            },
            {
                "context": "/usr/lib/projectname/src"
            },
            {
                "resolve": {
                    "extensions": [
                        ".ts", ".tsx", ".js", ".jsx", ".json"
                    ]
                }
            }]
        },
        "WebpackLibraryType": {
            "$id": "#/WebpackLibraryType",
            "default": "commonjs2",
            "description": "type of export",
            "oneOf": [{
                "const": "var"
            },
            {
                "const": "module"
            },
            {
                "const": "assign"
            },
            {
                "const": "this"
            },
            {
                "const": "window"
            },
            {
                "const": "self"
            },
            {
                "const": "global"
            },
            {
                "const": "commonjs"
            },
            {
                "const": "commonjs2"
            },
            {
                "const": "commonjs-module"
            },
            {
                "const": "commonjs-static"
            },
            {
                "const": "amd"
            },
            {
                "const": "amd-require"
            },
            {
                "const": "umd"
            },
            {
                "const": "umd2"
            },
            {
                "const": "jsonp"
            },
            {
                "const": "system"
            }]
        },
        "WebpackTarget":  {
            "$id": "#/WebpackTarget",
            "oneOf": [{
                "const": "node"
            },
            {
                "const": "web"
            },
            {
                "const": "webworker"
            },
            {
                "const": "async-node"
            },
            {
                "const": "node-webkit"
            },
            {
                "const": "electron-main"
            },
            {
                "const": "electron-renderer"
            },
            {
                "const": "electron-preload"
            },
            {
                "const": "nwjs"
            },
            {
                "const": "esX"
            },
            {
                "const": "browserlist"
            }]
        }
    }
}