{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://app1.spmeesseman.com/res/app/wpbuild/v0.0.1/schema/.wpbuildrc.schema.json",
    "description": "Webpack-Wrap configuration file schema",
    "title": "WpwRcSchema",
    "type": "object",
    "additionalProperties": false,
    "required": [
        "builds"
    ],
    "properties": {
        "$schema": {
            "type": "string",
            "pattern": "^(?:file(?:.*?)[/\\\\]|https:\\/\\/app1\\.spmeesseman\\.com\\/res\\/app\\/wpbuild\\/v[0-9]+\\.[0-9]+\\.[0-9]+(?:-(?:-pre|alpha|beta)\\.[0-9]+)?)\\/schema\\/\\.wpbuildrc\\.schema\\.json(?:.*?)$"
        },
        "alias": {
            "$ref": "#/definitions/WpwWebpackAliasConfig"
        },
        "builds": {
            "$ref": "#/definitions/WpwBuilds"
        },
        "development": {
            "$ref": "#/definitions/WpwBuildModeConfig"
        },
        "log": {
            "$ref": "#/definitions/WpwLog"
        },
        "options": {
            "$ref": "#/definitions/WpwBuildOptions"
        },
        "paths": {
            "$ref": "#/definitions/WpwRcPaths"
        },
        "production": {
            "$ref": "#/definitions/WpwBuildModeConfig"
        },
        "schemaVersion": {
            "$ref": "#/definitions/VersionString"
        },
        "source": {
            "$ref": "#/definitions/WpwSourceCode"
        },
        "test": {
            "$ref": "#/definitions/WpwBuildModeConfig"
        },
        "vscode": {
            "$ref": "#/definitions/WpwVsCodeConfig"
        },
        "version": {
            "$ref": "#/definitions/VersionString"
        },
        "wpwVersion": {
            "$ref": "#/definitions/VersionString"
        }
    },
    "definitions":
    {
        "BooleanDefaultFalse": {
            "type": "boolean",
            "$id": "#/WpwBooleanDefaultFalse",
            "default": false
        },
        "BooleanDefaultTrue": {
            "type": "boolean",
            "$id": "#/WpwBooleanDefaultTrue",
            "default": true
        },
        "BooleanReadOnly": {
            "type": "boolean",
            "$id": "#/WpwBooleanReadOnly",
            "readOnly": true,
            "default": false
        },
        "DirectoryPathRelative": {
            "type": "string",
            "$id": "#/WpwDirectoryPathRelative",
            "maxLength": 100,
            "pattern": "^(?:\\.{1,2}[\\\\/][\\w\\.\\-\\\\/]+|\\.\\.?)$",
            "if": {
                "pattern": "^\\.$"
            },
            "then": {
                "minLength": 1
            },
            "else": {
                "minLength": 3
            }
        },
        "DirectoryPath": {
            "$id": "#/WpwDirectoryPath",
            "type": "string",
            "default": "src",
            "maxLength": 150,
            "pattern": "^(?:\\.{1,2}|(?:\\.[\\\\/])?[\\w][~@!\\w\\.\\-\\\\/:]+)$",
            "if": {
                "pattern": "^\\.$"
            },
            "then": {
                "minLength": 1
            },
            "else": {
                "minLength": 3
            }
        },
        "DirectoryPathGlob": {
            "$id": "#/definitions/DirectoryPathGlob",
            "type": "string",
            "minLength": 4,
            "pattern": "^(?:\\.{1,2}[\\\\/])\\*{0,2}(?:\\.|(?:\\.[\\\\/])?[\\w][~@!\\w\\.\\-\\\\/]+)\\*{0,2}$",
            "if": {
                "pattern": "^\\.{1,2}[\\\\/]"
            },
            "then": {
                "if": {
                    "pattern": "^\\.\\.[\\\\/]\\*{0,2}[\\\\/]"
                },
                "then": {
                    "minLength": 5
                },
                "else": {
                    "minLength": 3
                }
            },
            "else": {
                "minLength": 1
            }
        },
        "FileName": {
            "$id": "#/WpwFileName",
            "type": "string",
            "minLength": 3,
            "maxLength": 150,
            "pattern": "^[\\w\\.\\-]+\\.([cm]?jsx?|tsx?)$"
        },
        "FilePath": {
            "$id": "#/WpwFilePath",
            "type": "string",
            "minLength": 5,
            "maxLength": 150,
            "pattern": "^(?:(?:\\.[\\\\\\/])?[~@!\\w\\.\\-\\\\\\/\\:]+)?\\.[a-z0-9\\.]+$"
        },
        "FilePathRelative": {
            "$id": "#/WpwFilePathRelative",
            "type": "string",
            "minLength": 5,
            "maxLength": 150,
            "pattern": "^\\.[\\\\\\/][\\w\\.\\-\\\\\\/]+\\.([cm]?jsx?|tsx?)$"
        },
        "FilePathRelativeLeadingDot": {
            "$id": "#/WpwFilePathRelativeLeadingDot",
            "type": "string",
            "minLength": 6,
            "maxLength": 150,
            "pattern": "^\\.{1,2}[\\\\\\/][\\w\\.\\-\\\\\\/]+?\\.\\w+$"
        },
        "VersionString": {
            "$id": "#/WpwVersionString",
            "type": "string",
            "readOnly": true,
            "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+(?:-(?:pre|alpha|beta)\\.[0-9]+)?$"
        },
        "WpwBuilds": {
            "$id": "#/WpwBuilds",
            "type": "array",
            "uniqueItems": true,
            "minItems": 0,
            "items": {
                "$ref": "#/definitions/WpwBuild"
            }
        },
        "WpwBuild": {
            "$id": "#/WpwBuild",
            "type": "object",
            "additionalProperties": false,
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 30
                },
                "active": {
                    "$ref": "#/definitions/BooleanReadOnly"
                },
                "alias": {
                    "$ref": "#/definitions/WpwWebpackAliasConfig"
                },
                "auto": {
                    "$ref": "#/definitions/BooleanReadOnly"
                },
                "debug": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "entry": {
                    "$ref": "#/definitions/WpwWebpackEntry"
                },
                "log": {
                    "$ref": "#/definitions/WpwLog"
                },
                "mode": {
                    "$ref": "#/definitions/WpwWebpackMode"
                },
                "options": {
                    "$ref": "#/definitions/WpwBuildOptions"
                },
                "paths": {
                    "$ref": "#/definitions/WpwRcPaths"
                },
                "source": {
                    "$ref": "#/definitions/WpwSourceCode"
                },
                "target": {
                    "$ref": "#/definitions/WebpackTarget"
                },
                "type": {
                    "$ref": "#/definitions/WpwBuildType"
                },
                "vscode": {
                    "$ref": "#/definitions/WpwVsCodeConfig"
                }
            },
            "dependencies": {
                "debug": {
                    "if": {
                        "properties": {
                            "debug": {
                                "const": true
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                        {
                            "properties": {
                                "type": {
                                    "enum": [
                                        "module"
                                    ]
                                }
                            }
                        },
                        {
                            "anyOf": [
                            {
                                "properties": {
                                    "plugins": {
                                        "properties": {
                                            "sourcemaps": {
                                                "const": true
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "exports": {
                                        "properties": {
                                            "devtool": {
                                                "const": true
                                            }
                                        }
                                    }
                                }
                            }]
                        }]
                    }
                },
                "options": {
                    "properties": {
                        "types": {
                            "allOf": [
                            {
                                "if": {
                                    "properties": {
                                        "dts": { 
                                            "const": true
                                        }
                                    }
                                },
                                "then": { 
                                    "properties": {
                                        "type": { 
                                            "enum": [
                                                "types", "module"
                                            ]
                                        }
                                    }
                                }
                            }]
                        },
                        "tsbundle": {
                            "allOf": [
                            {
                                "if": {
                                    "properties": {
                                        "bundle": { 
                                            "const": true
                                        }
                                    }
                                },
                                "then": { 
                                    "properties": {
                                        "type": { 
                                            "enum": [
                                                "types", "module"
                                            ]
                                        },
                                        "dts": {
                                            "not": {
                                                "const": false
                                            }
                                        }
                                    }
                                }
                            }]
                        }
                    }
                },
                "type": {
                    "allOf": [
                    {
                        "if": {
                            "properties": {
                                "type": { 
                                    "const": "webapp"
                                }
                            }
                        },
                        "then": { 
                            "properties": {
                                "target": { 
                                    "enum": [
                                        "web", "webworker"
                                    ]
                                }
                            }
                        }
                    },
                    {
                        "if": {
                            "properties": {
                                "target": { 
                                    "enum": [
                                        "web", "webworker"
                                    ]
                                }
                            }
                        },
                        "then": { 
                            "properties": {
                                "type": { 
                                    "enum": [
                                        "webapp", "module"
                                    ]
                                }
                            }
                        }
                    },
                    {
                        "if": {
                            "properties": {
                                "type": { 
                                    "enum": [ "types", "module", "tests" ]
                                }
                            }
                        },
                        "then": { 
                            "properties": {
                                "target": { 
                                    "const": "node"
                                }
                            }
                        }
                    },
                    {
                        "if": {
                            "properties": {
                                "type": { 
                                    "const": "types"
                                }
                            }
                        },
                        "then": {
                            "properties": {
                                "options": {
                                    "required": [
                                        "typesEntryMode", "typesPackage"
                                    ]
                                }
                            },
                            "$comment": "test"
                        },
                        "else": {
                            "properties": {
                                "options": {   
                                    "not": {
                                        "propertyNames": {
                                            "pattern": "^types(?:EntryMode|Package)$"
                                        }
                                    }
                                }
                            }
                        }
                    }]
                }
            }
        },
        "WpwBuildModeConfig": {
            "$id": "#/WpwBuildModeConfig",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "alias": {
                    "$ref": "#/definitions/WpwWebpackAliasConfig"
                },
                "builds": {
                    "$ref": "#/definitions/WpwBuilds"
                },
                "log": {
                    "$ref": "#/definitions/WpwLog"
                },
                "paths": {
                    "$ref": "#/definitions/WpwRcPaths"
                },
                "options": {
                    "$ref": "#/definitions/WpwBuildOptions"
                },
                "source": {
                    "$ref": "#/definitions/WpwSourceCode"
                },
                "vscode": {
                    "$ref": "#/definitions/WpwVsCodeConfig"
                }
            }
        },
        "WpwBuildOptions": {
            "$id": "#/WpwBuildOptions",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "analyze": {
                    "$ref": "#/definitions/WpwPluginConfigAnalyze"
                },
                "banner": {
                    "$ref": "#/definitions/WpwPluginConfigBanner"
                },
                "ignore": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "istanbul": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "jsdoc": {
                    "$ref": "#/definitions/WpwPluginConfigJsDoc"
                },
                "licensefiles": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "loghooks": {
                    "$ref": "#/definitions/BooleanDefaultTrue"
                },
                "optimization": {
                    "$ref": "#/definitions/BooleanDefaultTrue"
                },
                "progress": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "scm": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "sourcemaps": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "upload": {
                    "$ref": "#/definitions/WpwPluginConfigUpload"
                },
                "vendormod": {
                    "$ref": "#/definitions/WpwPluginConfigVendorMod"
                },
                "clean": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "copy": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "runtimevars": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "testsuite": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "tsbundle": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "tscheck": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "types": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "cache": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "devtool": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "experiments": {
                    "$ref": "#/definitions/BooleanDefaultTrue"
                },
                "externals": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "ignorewarnings": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "minification": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "wait": {
                    "$ref": "#/definitions/WpwPluginConfigWait"
                },
                "watch": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "typesPackage": {
                    "type": "string",
                    "default": "entry",
                    "enum": [
                        "entry", "plugin"
                    ]
                },
                "typesEntryMode": {
                    "type": "string",
                    "default": "main",
                    "enum": [
                        "main", "index"
                    ]
                }
            },
            "dependencies": {
                "tsbundle": {
                    "allOf": [
                    {
                        "if": {
                            "properties": {
                                "tsbundle": { 
                                    "const": true
                                }
                            }
                        },
                        "then": { 
                            "anyOf": [
                            {
                                "properties": {
                                    "dts": {
                                        "const": true
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "tscheck": {
                                        "const": true
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "types": {
                                        "const": true
                                    }
                                }
                            }]
                        }
                    }]
                }
            }
        },
        "WpwBuildOptionsTesting1": {
            "$id": "#/WpwBuildOptionsTesting1",
            "anyOf": [
                {"$ref": "#/definitions/WpwBuildOptionsPlugins"},
                {"$ref": "#/definitions/WpwBuildOptionsExports"},
                {"$ref": "#/definitions/WpwBuildOptionsCustom"},
                {"$ref": "#/definitions/WpwBuildOptionsPluginProperties"},
                {"$ref": "#/definitions/WpwBuildOptionsExportProperties"},
                {"$ref": "#/definitions/WpwBuildOptionsCustomProperties"}
            ]
        },
        "WpwBuildOptionsTesting2": {
            "$id": "#/WpwBuildOptionsTesting2",
            "properties": {
                "plugins": {"$ref": "#/definitions/WpwBuildOptionsPlugins"},
                "exports": {"$ref": "#/definitions/WpwBuildOptionsExports"},
                "custom": {"$ref": "#/definitions/WpwBuildOptionsCustom"}
            }
        },
        "WpwBuildOptionsCustomProperties": {
            "$id": "#/WpwBuildOptionsCustomProperties",
            "propertyNames": {
                "$comment": "Need to anyOf these or else the enum and pattern conflict",
                "anyOf": [{
                    "enum": [
                        "typesPackage", "typesEntryMode"
                    ]
                },
                {
                    "pattern": "types[a-z0-9]{7,}"
                }]
            }
        },
        "WpwBuildOptionsExportProperties": {
            "$id": "#/WpwBuildOptionsExportProperties",
            "propertyNames": {
                "$ref": "#/definitions/WpwBuildOptionsExportKey"
            }
        },
        "WpwBuildOptionsPluginProperties": {
            "$id": "#/WpwBuildOptionsPluginProperties",
            "propertyNames": {
                "$ref": "#/definitions/WpwBuildOptionsPluginKey"
            }
        },
        "WpwBuildOptionsPluginKey": {
            "$id": "#/WpwBuildOptionsPluginKey",
            "oneOf": [{
                "const": "analyze"
            },
            {
                "const": "banner"
            },
            {
                "const": "ignore"
            },
            {
                "const": "istanbul"
            },
            {
                "const": "jsdoc"
            },
            {
                "const": "licensefiles"
            },
            {
                "const": "loghooks"
            },
            {
                "const": "optimization"
            },
            {
                "const": "progress"
            },
            {
                "const": "scm"
            },
            {
                "const": "sourcemaps"
            },
            {
                "const": "upload"
            },
            {
                "const": "vendormod"
            },
            {
                "const": "clean"
            },
            {
                "const": "copy"
            },
            {
                "const": "runtimevars"
            },
            {
                "const": "testsuite"
            },
            {
                "const": "tsbundle"
            },
            {
                "const": "tscheck"
            },
            {
                "const": "types"
            }]
        },
        "WpwBuildOptionsPluginKeyReadOnly": {
            "$id": "#/WpwBuildOptionsPluginKeyReadOnly",
            "$ref": "#/definitions/WpwBuildOptionsPluginKey",
            "readOnly": true
        },
        "WpwBuildOptionsExportKey": {
            "$id": "#/WpwBuildOptionsExportKey",
            "oneOf": [{
                "const": "optimization"
            },
            {
                "const": "cache"
            },
            {
                "const": "devtool"
            },
            {
                "const": "experiments"
            },
            {
                "const": "externals"
            },
            {
                "const": "ignorewarnings"
            },
            {
                "const": "minification"
            },
            {
                "const": "watch"
            }]
        },
        "WpwBuildOptionsCustom": {
            "$id": "#/WpwBuildOptionsCustom",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "typesPackage": {
                    "type": "string",
                    "default": "entry",
                    "enum": [
                        "entry", "plugin"
                    ]
                },
                "typesEntryMode": {
                    "type": "string",
                    "default": "main",
                    "enum": [
                        "main", "index"
                    ]
                },
                "wait": {
                    "$ref": "#/definitions/WpwPluginConfigWait"
                }
            }
        },
        "WpwBuildOptionsPlugins": {
            "$id": "#/WpwBuildOptionsPlugins",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "analyze": {
                    "$ref": "#/definitions/WpwPluginConfigAnalyze"
                },
                "banner": {
                    "$ref": "#/definitions/WpwPluginConfigBanner"
                },
                "clean": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "copy": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "ignore": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "istanbul": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "jsdoc": {
                    "$ref": "#/definitions/WpwPluginConfigJsDoc"
                },
                "licensefiles": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "loghooks": {
                    "$ref": "#/definitions/BooleanDefaultTrue"
                },
                "optimization": {
                    "$ref": "#/definitions/BooleanDefaultTrue"
                },
                "progress": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "runtimevars": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "scm": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "sourcemaps": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "testsuite": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "tsbundle": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "tscheck": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "types": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "upload": {
                    "$ref": "#/definitions/WpwPluginConfigUpload"
                },
                "vendormod": {
                    "$ref": "#/definitions/WpwPluginConfigVendorMod"
                }
            },
            "dependencies": {
                "tsbundle": {
                    "allOf": [
                    {
                        "if": {
                            "properties": {
                                "tsbundle": { 
                                    "const": true
                                }
                            }
                        },
                        "then": { 
                            "anyOf": [
                            {
                                "properties": {
                                    "dts": {
                                        "const": true
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "tscheck": {
                                        "const": true
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "types": {
                                        "const": true
                                    }
                                }
                            }]
                        }
                    }]
                }
            }
        },
        "WpwBuildOptionsExports": {
            "$id": "#/WpwBuildOptionsExports",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "optimization": {
                    "$ref": "#/definitions/BooleanDefaultTrue"
                },
                "cache": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "devtool": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "experiments": {
                    "$ref": "#/definitions/BooleanDefaultTrue"
                },
                "externals": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "ignorewarnings": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "minification": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                },
                "watch": {
                    "$ref": "#/definitions/BooleanDefaultFalse"
                }
            }
        },
        "WpwBuildType": {
            "$id": "#/WpwBuildType",
            "type": "string",
            "enum": [
                "ecma", "jsdoc", "module", "tests", "types", "webapp"
            ],
            "examples": [{
                "builds": [{
                    "name": "webpack-wrap",
                    "type": "module"
                },
                {
                    "name": "wpw-types",
                    "type": "types"
                }],
                "production": {
                    "builds": [{
                        "name": "documentation",
                        "type": "jsdoc",
                        "options": {
                            "outDir": "dist/docs",
                            "title": "Project Documentation"
                        }
                    }]
                },
                "test": {
                    "builds": [{
                        "name": "wpw-tests",
                        "type": "tests"
                    }]
                }
            }]
        },
        "WpwLog": {
            "$id": "#/WpwLog",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "color": {
                    "$ref": "#/definitions/WpwLogTrueColor"
                },
                "colors": {
                    "type": "object",
                    "$id": "#/WpwLogColoring",
                    "properties": {
                        "default": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        },
                        "buildBracket": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        },
                        "buildText": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        },
                        "infoIcon": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        },
                        "valueStar": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        },
                        "valueStarText": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        },
                        "tagBracket": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        },
                        "tagText": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        },
                        "uploadSymbol": {
                            "$ref": "#/definitions/WpwLogTrueColor"
                        }
                    },
                    "additionalProperties": false,
                    "required": []
                },
                "envTag1": {
                    "type": "string",
                    "default": "wpbuild",
                    "minimum": 2,
                    "maxLength": 15
                },
                "envTag2": {
                    "type": "string",
                    "default": "info",
                    "minimum": 2,
                    "maxLength": 15
                },
                "envTagDisable": {
                    "$ref": "#/definitions/BooleanReadOnly"
                },
                "level": {
                    "title": "WpBuildLogLevel",
                    "oneOf": [{
                        "const": 0,
                        "description": "No logging"
                    },
                    {
                        "const": 1,
                        "description": "Logging level 1 - Errors, warnings, and function start/end"
                    },
                    {
                        "const": 2,
                        "description": "Logging level 2 - Level 1 + parameter values"
                    },
                    {
                        "const": 3,
                        "description": "Logging level 3 - Level 2 + non-looping processing detail"
                    },
                    {
                        "const": 4,
                        "description": "Logging level 4 - Level 3 + looping processing detail"
                    },
                    {
                        "const": 5,
                        "description": "Logging level 5 - Verbose"
                    }]
                },
                "pad": {
                    "type": "object",
                    "title": "WpwLogPad",
                    "additionalProperties": false,
                    "properties": {
                        "base": {
                            "type": "number",
                            "default": 0
                        },
                        "envTag": {
                            "type": "number",
                            "default": 22
                        },
                        "value": {
                            "type": "number",
                            "default": 40
                        },
                        "uploadFileName": {
                            "type": "number",
                            "default": 50
                        }
                    }
                },
                "timestamp": {
                    "type": "string",
                    "default": "hh:mm:ss:sss",
                    "enum": [
                        "mm:ss",
                        "mm:ss:sss",
                        "hh:mm:ss",
                        "hh:mm:ss:sss"
                    ]
                },
                "valueMaxLineLength": {
                    "type": "number",
                    "default": 100,
                    "minValue": 50,
                    "maxValue": 250
                }
            }
        },
        "WpwPackageJson": {
            "$id": "#/WpwPackageJson",
            "type": "object",
            "description": "Required package.json properties",
            "additionalProperties": false,
            "required": [
                "name",
                "version"
            ],
            "properties": {
                "author": {
                    "type": [
                        "string", "object"
                    ],
                    "oneOf": [
                        {
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 30,
                            "pattern": "^[\\W\\w\\.\\- \\@]+$"
                        }, 
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                                "name"
                            ],
                            "properties":
                            {
                                "name": {
                                    "type": "string",
                                    "minLength": 3,
                                    "maxLength": 30,
                                    "pattern": "^[\\W\\w\\.\\- \\@]+$"
                                },
                                "email": {
                                    "type": "string",
                                    "minLength": 6,
                                    "maxLength": 50,
                                    "pattern": "^[\\w\\.\\-\\@]+$"
                                }
                            }
                        }
                    ]
                },
                "description": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "main": {
                    "type": "string"
                },
                "module": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "publisher": {
                    "type": "string"
                },
                "scopedName": {
                    "$ref": "#/definitions/WpwPackageJsonScopedName"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "WpwPackageJsonScopedName": {
            "type": "object",
            "readOnly": true,
            "additionalProperties": false,
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2,
                    "readOnly": true
                },
                "scope": {
                    "type": "string",
                    "pattern": "@[a-z]+",
                    "maxLength": 30,
                    "minLength": 3,
                    "readOnly": true
                }
            },
            "required": [
                "name"
            ]
        },
        "WpwRcPaths": {
            "$id": "#/WpwRcPaths",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "base": {
                    "$ref": "#/definitions/DirectoryPath",
                    "default": ".",
                    "readOnly": true,
                    "description": "Path to the base project directory, a full path containing project's package.json"
                },
                "ctx": {
                    "$ref": "#/definitions/DirectoryPath",
                    "default": ".",
                    "description": "Path to the base context directory as defined by Webpack, full path or relative to the project directory containing package.json"
                },
                "dist": {
                    "type": "string",
                    "default": "dist",
                    "description": "Path to the distribution / output directory, full path or relative to the project directory containing package.json"
                },
                "src": {
                    "$ref": "#/definitions/DirectoryPath",
                    "default": "src",
                    "description": "Path to the base source directory, full path or relative to the project directory containing package.json"
                },
                "temp": {
                    "$ref": "#/definitions/DirectoryPath",
                    "default": "node_modules/.cache/wpbuild/temp",
                    "description": "Path to a temporary directory, full path or relative to the project directory containing package.json"
                }
            }
        },
        "WpwPluginConfigAnalyze": {
            "$id": "#/WpwPluginConfigAnalyze",
            "oneOf": [{
                "type": "boolean"
            },
            {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "analyzer": {
                        "type": "boolean"
                    },
                    "circular": {
                        "type": "boolean"
                    },
                    "visualizer": {
                        "type": "boolean"
                    }
                }
            }]
        },
        "WpwPluginConfigBanner": {
            "$id": "#/WpwPluginConfigBanner",
            "oneOf": [{
                "type": "boolean"
            },
            {
                "type": "string",
                "minLength": 2,
                "maxLength": 500,
                "pattern": "^[\\w\\-\\.,&%# |\\(\\)@\\[\\]\\r\\n]+$"
            }]
        },
        "WpwPluginConfigJsDoc": {
            "$id": "#/WpwPluginConfigJsDoc",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "title": {
                    "type": "string"
                },
                "outDir": {
                    "$ref": "#/definitions/DirectoryPath"
                },
                "rootDir": {
                    "$ref": "#/definitions/DirectoryPath"
                },
                "verbose": {
                    "type": "boolean"
                }
            },
            "required": [
                "title"
            ]
        },
        "WpwPluginConfigUpload": {
            "$id": "#/WpwPluginConfigUpload",
            "oneOf": [{
                "type": "boolean"
            },
            {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "url": {
                        "type": "string",
                        "maxLength": 150,
                        "pattern": "^https?:\\/\\/[${}\\w\\.\\-]+[\\\\/?][${}\\w\\W\\.\\-\\\\/&]+"
                    },
                    "plink": {
                        "type": "object",
                        "properties": {
                            "user": {
                                "type": "string",
                                "minLength": 4,
                                "maxLength": 100
                            },
                            "key": {
                                "type": "string",
                                "minLength": 4,
                                "maxLength": 100
                            }
                        },
                        "required": [
                            "user", "key"
                        ],
                        "examples": [{
                            "plink": {
                                "key": "${REPLACED_ENVVAR_PLINK_KEY}",
                                "user": "${REPLACED_ENVVAR_PLINK_USER}"
                            }
                        }]
                    },
                    "scp": {
                        "type": "object",
                        "properties": {
                            "user": {
                                "type": "string",
                                "minLength": 4,
                                "maxLength": 100
                            },
                            "key": {
                                "type": "string",
                                "minLength": 4,
                                "maxLength": 100
                            }
                        },
                        "required": [
                            "user", "key"
                        ],
                        "examples": [{
                            "scp": {
                                "key": "${REPLACED_ENVVAR_SCP_KEY}",
                                "user": "${REPLACED_ENVVAR_SCP_USER}"
                            }
                        }]
                    }
                }
            }]
        },
        "WpwPluginConfigVendorMod": {
            "$id": "#/WpwPluginConfigVendorMod",
            "oneOf": [{
                "type": "boolean"
            },
            {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "clean_plugin": {
                        "type": "boolean"
                    },
                    "source_map_plugin": {
                        "type": "boolean"
                    },
                    "ts_loader": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "clean_plugin", "ts_loader"
                ]
            }]
        },
        "WpwPluginConfigWaitEvent": {
            "enum": [
                "done", "start"
            ]
        },
        "WpwPluginConfigWait": {
            "$id": "#/WpwPluginConfigWait",
            "oneOf": [{
                "$ref": "#/definitions/WpwPluginConfigWaitSingle"
            },
            {
                "$ref": "#/definitions/WpwPluginConfigWaitMulti"
            }]
        },
        "WpwPluginConfigWaitMulti": {
            "$id": "#/WpwPluginConfigWaitMulti",
            "type": "array",
            "items": {
                "$ref": "#/definitions/WpwPluginConfigWaitSingle"
            }
        },
        "WpwPluginConfigWaitSingle": {
            "$id": "#/WpwPluginConfigWaitSingle",
            "type": "object",
            "additionalItems": false,
            "required": [
                "type", "target", "name"
            ],
            "properties": {
                "type": {
                    "enum": [ "file", "event" ]
                },
                "source": {
                    "$ref": "#/definitions/WpwBuildOptionsPluginKeyReadOnly"
                },
                "target": {
                    "$ref": "#/definitions/WpwBuildOptionsPluginKey"
                },
                "name": {
                    "oneOf": [
                    {
                        "$ref": "#/definitions/WpwPluginConfigWaitEvent"
                    },
                    {
                        "$ref": "#/definitions/FilePath"
                    }]
                },
                "interval": {
                    "type": "number"
                },
                "timeout": {
                    "type": "number"
                }
            },
            "dependencies": {
                "event": {
                    "if": {
                        "properties": {
                            "type": {
                                "const": "event"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "name": {
                                "$ref": "#/definitions/WpwPluginConfigWaitEvent"
                            }
                        }
                    },
                    "else": {
                        "properties": {
                            "name": {
                                "$ref": "#/definitions/FilePath"
                            }
                        }
                    }
                },
                "source": {
                    "if": {
                        "properties": {
                            "source": {
                                "minLength": 1
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "source": {
                                "maxLength": 0
                            }
                        }
                    }
                }
            },
            "examples": [{
                "builds": [
                {
                    "name": "main",
                    "type": "module",
                    "options": {
                        "copy": true,
                        "runtimevars": true,
                        "wait": {
                            "type": "event",
                            "name": "done",
                            "target": "dts_types"
                        }
                    }
                },
                {
                    "name": "dts_types",
                    "type": "types",
                    "options": {
                        "tsbundle": true,
                        "typesPackage": "entry",
                        "typesEntryMode": "index"
                    },
                    "paths": {
                        "dist": "types/build",
                        "src": "types"
                    }
                }]
            }]
        },
        "WpwLogTrueColor": {
            "$id": "#/WpwLogTrueColor",
            "oneOf": [{
                "const": "black"
            },
            {
                "const": "blue"
            },
            {
                "const": "cyan"
            },
            {
                "const": "green"
            },
            {
                "const": "grey"
            },
            {
                "const": "magenta"
            },
            {
                "const": "red"
            },
            {
                "const": "white"
            },
            {
                "const": "yellow"
            }]
        },
        "WpwLogColor": {
            "$id": "#/WpwLogColor",
            "oneOf": [{
                "$ref": "#/definitions/WpwLogTrueColor"
            },
            {
                "const": "bold"
            },
            {
                "const": "inverse"
            },
            {
                "const": "italic"
            },
            {
                "const": "system"
            },
            {
                "const": "underline"
            }]
        },
        "WpwSourceCode": {
            "$id": "#/WpwSourceCode",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "type": {      
                    "$ref": "#/definitions/WpwSourceCodeType"
                },
                "config": {
                    "$ref": "#/definitions/WpwSourceCodeConfig"
                }
            },
            "required": [
                "type"
            ]
        },
        "WpwSourceCodeConfig": {
            "$id": "#/WpwSourceCodeConfig",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "dir": {
                    "type": "string",
                    "readOnly": true
                },
                "file": {
                    "type": "string",
                    "readOnly": true
                },
                "excludeAbs": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                },
                "includeAbs": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                },
                "options": {      
                    "$ref": "#/definitions/WpwSourceCodeConfigOptions"
                },
                "path": {
                    "type": "string",
                    "default": "tsconfig.json",
                    "pattern": "^(?:(?:\\.[\\\\/])?[~@!\\w\\.\\-\\\\/:]+)?(?:t|j)sconfig\\.(?:[\\w\\-]+?\\.)?json$",
                    "minLength": 13,
                    "maxLength": 150,
                    "description": "Path to a [t|s]]sconfig[.*].json file, filename inclusive, full path or relative to the project base directory containing package.json"
                },
                "raw": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "WpwSourceCodeConfigOptions": {
            "$id": "#/WpwSourceCodeConfigOptions",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "compilerOptions": {
                    "$ref": "#/definitions/WpwSourceCodeConfigCompilerOptions"
                },
                "exclude": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "include": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extends": {
                    "oneOf": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }]
                }
            }
        },
        "WpwSourceCodeConfigCompilerOptions": {
            "$id": "#/WpwSourceCodeConfigCompilerOptions",
            "type": "object",
            "additionalProperties": false,
            "properties": {                      
                "allowJs": {
                    "type": "boolean"
                },
                "alwaysStrict": {
                    "type": "boolean"
                },
                "allowSyntheticDefaultImports": {
                    "type": "boolean"
                },
                "allowUnreachableCode": {
                    "type": "boolean"
                },
                "allowUnusedLabels": {
                    "type": "boolean"
                },
                "baseUrl":{
                    "type": "string"
                },
                "checkJs": {
                    "type": "boolean"
                },
                "declaration": {
                    "type": "boolean"
                },
                "declarationsDir": {
                    "type": "string"
                },
                "declarationMap": {
                    "type": "boolean"
                },
                "declarationsOnly": {
                    "type": "boolean"
                },
                "downlevelIteration": {
                    "type": "boolean"
                },
                "emitDecoratorMetadata":  {
                    "type": "boolean"
                },
                "experimentalDecorators": {
                    "type": "boolean"
                },
                "incremental": {
                    "type": "boolean"
                },  
                "importHelpers": {
                    "type": "boolean"
                },
                "inlineSources": {
                    "type": "boolean"
                },
                "inlineSourceMap": {
                    "type": "boolean"
                },
                "isolatedModules": {
                    "type": "boolean"
                },         
                "jsx": {
                    "type": "string"
                },
                "lib": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WpwSourceCodeNodeJsTarget"
                    }
                },  
                "mapRoot": {
                    "type": "string"
                },
                "module": {
                    "$ref": "#/definitions/WpwSourceCodeNodeJsModule"
                },
                "moduleResolution": {
                    "$ref": "#/definitions/WpwSourceCodeNodeJsModuleResolution"
                },
                "noEmit": {
                    "type": "boolean"
                },
                "noFallthroughCasesInSwitch": {
                    "type": "boolean"
                },
                "noImplicitAny": {
                    "type": "boolean"
                },
                "noImplicitOverride": {
                    "type": "boolean"
                },
                "noImplicitReturns": {
                    "type": "boolean"
                },
                "noImplicitThis": {
                    "type": "boolean"
                },
                "noImplicitUseStrict": {
                    "type": "boolean"
                },
                "noUncheckedIndexedAccess": {
                    "type": "boolean"
                },
                "noUnusedLocals": {
                    "type": "boolean"
                },
                "noUnusedParameters": {
                    "type": "boolean"
                },
                "outFile": {
                    "type": "string"
                }, 
                "outDir": {
                    "type": "string"
                }, 
                "paths": {
                    "$ref": "#/definitions/WpwWebpackAliasConfig"
                }, 
                "removeComments": {
                    "type": "boolean"
                },
                "resolveJsonModule": {
                    "type": "boolean"
                },
                "rootDir": {
                    "type": "string"
                },
                "rootDirs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "skipLibCheck": {
                    "type": "boolean"
                },
                "sourceMap": {
                    "type": "boolean"
                },
                "sourceRoot": {
                    "type": "string"
                },
                "strict": {
                    "type": "boolean"
                },
                "strictPropertyInitialization": {
                    "type": "boolean"
                },
                "strictFunctionTypes": {
                    "type": "boolean"
                },
                "strictBindCallApply": {
                    "type": "boolean"
                }, 
                "strictNullChecks": {
                    "type": "boolean"
                }, 
                "suppressImplicitAnyIndexErrors": {
                    "type": "boolean"
                },
                "suppressExcessPropertyErrors": {
                    "type": "boolean"
                },
                "target": {
                    "$ref": "#/definitions/WpwSourceCodeNodeJsTarget"
                },
                "tsBuildInfoFile": {
                    "type": "string"
                },                 
                "typeRoots": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },                 
                "types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "WpwSourceCodeType": {
            "$id": "#/WpwSourceCodeType",
            "type": "string",
            "default": "typescript",
            "enum": [
                "javascript",
                "typescript"
            ]
        },
        "WpwSourceCodeNodeJsModuleResolution": {
            "$id": "#/WpwSourceCodeNodeJsModuleResolution",
            "type": "string",
            "default": "node",
            "enum": [
                "node", "node10", "node16", "nodenext", "bundler"
            ]
        },
        "WpwSourceCodeNodeJsModule": {
            "$id": "#/WpwSourceCodeNodeJsModule",
            "type": "string",
            "default": "commonjs",
            "enum": [
                "amd", "commonjs", "commonJS", "es2015", "ES2015", "es6", "ES6", "esnext", "ESNEXT", "none", "system", "umd"
            ]
        },
        "WpwSourceCodeNodeJsTarget": {
            "$id": "#/WpwSourceCodeNodeJsTarget",
            "type": "string",
            "default": "es2020",
            "enum": [
                "es5", "es6", "es2015", "es2016", "es2017", "es2018", "es2019", "es2020", "esnext",
                "ES5", "ES6", "ES2015", "ES2016", "ES2017", "ES2018", "ES2019", "ES2020", "ESNEXT"
            ]
        },
        "WpwVsCodeConfig": {
            "$id": "#/WpwVsCodeConfig",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "type": {
                    "default": false,
                    "oneOf": [{
                        "const": false
                    },
                    {
                        "const": "extension"
                    },
                    {
                        "const": "languageclient"
                    },
                    {
                        "const": "languageserver"
                    },
                    {
                        "const": "none"
                    },
                    {
                        "const": "tests"
                    },
                    {
                        "const": "webview"
                    }]
                }
            },
            "required": [
                "type"
            ],
            "examples": [{
                "vscode": {
                    "type": "extension"
                }
            }]
        },
        "WpwWebpackEntryObject": {
            "$id": "#/WpwWebpackEntryObject",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "asyncChunks": {
                    "type": "boolean"
                },
                "baseUri": {
                    "type": "string",
                    "minLength": 1
                },
                "chunkLoading": {
                    "oneOf": [{
                        "type": "boolean"
                    },
                    {
                        "const": "jsonp"
                    },
                    {
                        "const": "import"
                    },
                    {
                        "const": "importScripts"
                    },
                    {
                        "const": "require"
                    },
                    {
                        "const": "async-node"
                    }]
                },
                "dependOn": {
                    "oneOf": [{
                        "type": "string",
                        "pattern": "^[a-zA-Z][\\w]+$"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "pattern": "^[a-zA-Z][\\w]+$"
                        }
                    }]
                },
                "filename": {
                    "$ref": "#/definitions/FileName"
                },
                "import": {
                    "$ref": "#/definitions/FilePathRelativeLeadingDot"
                },
                "layer": {
                    "oneOf": [{
                        "const": "debug"
                    },
                    {
                        "const": "release"
                    }]
                },
                "publicPath": {
                    "$ref": "#/definitions/DirectoryPathRelative"
                }
            },
            "propertyNames": {
                "minLength": 3,
                "maxLength": 20,
                "pattern": "^[a-z][\\w]+$"
            },
            "required": [
                "import"
            ]
        },
        "WpwWebpackEntryValue": {
            "$id": "#/WpwWebpackEntryValue",
            "anyOf": [
            {
                "$ref": "#/definitions/FilePathRelativeLeadingDot"
            },
            {
                "$ref": "#/definitions/WpwWebpackEntryObject"
            }]
        },
        "WpwWebpackEntry": {
            "$id": "#/WpwWebpackEntry",
            "type": "object",
            "description": "mapping of module names to respective entry point file, relative to context directory",
            "minProperties": 1,
            "additionalProperties": false,
            "patternProperties": {
                "^[a-z][\\w\\-\\.]+$": {
                    "$ref": "#/definitions/WpwWebpackEntryValue"
                }
            },
            "propertyNames": {
                "maxLength": 30
            },
            "examples": [{
                "entry": {
                    "modulename": "./path/to/entry.ts"
                }
            },
            {
                "entry": {
                    "modulename1": "./path/to/entry1.ts",
                    "modulename2": "./path/to/entry2.ts",
                    "modulename3": "./path/to/entry3.ts"
                }
            },
            {
                "entry": {
                    "modulename": {
                        "import": "./path/to/entrymodule.ts"
                    },
                    "modulename2": "./path/to/entry2.ts"
                }
            },
            {
                "entry": {
                    "modulename1": {
                        "import": "./path/to/entrymodule1.ts"
                    },
                    "modulename2": {
                        "import": "./path/to/entrymodule1.ts",
                        "dependOn": "modulename1"
                    },
                    "modulename3": {
                        "import": "./path/to/entrymodule2.ts",
                        "dependOn": "modulename2"
                    }
                }
            }]
        },
        "WpwWebpackMode":  {
            "$id": "#/WpwWebpackMode",
            "type": "string",
            "default": "production",
            "enum": [
                "development",
                "production",
                "none",
                "test"
            ]
        },
        "WpwWebpackAliasValue": {
            "$id": "#/WpwWebpackAliasValue",
            "anyOf": [{
                "$ref": "#/definitions/DirectoryPathGlob"
            },
            {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/DirectoryPathGlob"
                }
            },
            {
                "type": "boolean",
                "const": false,
                "readOnly": true
            }]
        },
        "WpwWebpackAliasConfig": {
            "$id": "#/WpwWebpackAliasConfig",
            "type": "object",
            "minProperties": 0,
            "patternProperties": {
                "^[a-zA-Z:@][\\w:@]+$": {
                    "$ref": "#/definitions/WpwWebpackAliasValue"
                }
            },
            "propertyNames": {
                "maxLength": 20
            },
            "description": "Key value pairs for aliased import/require paths",
            "examples": [{
                "alias":
                {
                    ":env": "src/lib/env/node",
                    ":types": "types"
                }
            },
            {
                "alias": {
                    ":env": [
                        "src/lib/env/web", "src/webapp/tools/env/web"
                    ],
                    ":types": "types"
                }
            }]
        },
        "WebpackConfigOverride": {
            "$id": "WebpackConfigOverride",
            "type": "object",
            "minProperties": 0,
            "additionalProperties": true,
            "patternProperties": {
                "^[a-z][\\w]+$": {
                    "$ref": "#"
                }
            },
            "propertyNames": {
                "maxLength": 20
            },
            "description": "An object that is directly applied to the webpack configurqtion before it is returned to the main process",
            "examples": [
            {
                "context": "/usr/lib/projectname/src",
                "resolve": {
                    "alias": {
                        ":env/*": "src/lib/env/node/*",
                        ":types": "types"
                    },
                    "extensions": [
                        ".ts", ".tsx", ".js", ".jsx", ".json"
                    ]
                }
            }]
        },
        "WebpackTarget":  {
            "$id": "WebpackTarget",
            "oneOf": [{
                "const": "node"
            },
            {
                "const": "web"
            },
            {
                "const": "webworker"
            },
            {
                "const": "async-node"
            },
            {
                "const": "node-webkit"
            },
            {
                "const": "electron-main"
            },
            {
                "const": "electron-renderer"
            },
            {
                "const": "electron-preload"
            },
            {
                "const": "nwjs"
            },
            {
                "const": "esX"
            },
            {
                "const": "browserlist"
            }]
        },
        "WebpackLibraryType": {
            "$id": "WebpackLibraryType",
            "default": "commonjs2",
            "oneOf": [{
                "const": "var"
            },
            {
                "const": "module"
            },
            {
                "const": "assign"
            },
            {
                "const": "assign-properties"
            },
            {
                "const": "this"
            },
            {
                "const": "window"
            },
            {
                "const": "self"
            },
            {
                "const": "global"
            },
            {
                "const": "commonjs"
            },
            {
                "const": "commonjs2"
            },
            {
                "const": "commonjs-module"
            },
            {
                "const": "commonjs-static'"
            },
            {
                "const": "amd"
            },
            {
                "const": "amd-require"
            },
            {
                "const": "umd'"
            },
            {
                "const": "umd2"
            },
            {
                "const": "jsonp"
            },
            {
                "const": "system"
            }]
        }
    }
}